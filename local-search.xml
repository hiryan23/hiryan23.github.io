<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024.06.01 写在大三的儿童节</title>
    <link href="/2024/06/01/%E5%86%99%E5%9C%A8%E5%A4%A7%E4%B8%89%E7%9A%84%E5%84%BF%E7%AB%A5%E8%8A%82/"/>
    <url>/2024/06/01/%E5%86%99%E5%9C%A8%E5%A4%A7%E4%B8%89%E7%9A%84%E5%84%BF%E7%AB%A5%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<p>再自称儿童似乎有些过于可笑了，我也从不如此。但是，如果年岁的增长意味着逐渐丧失尽孩童般的纯真，那我不如立刻死亡。</p><span id="more"></span><p>![[../pics_temp/20230601贺图.png]]</p><p>其实我也不知道为啥要写这篇文章。我几乎从来不过儿童节，但是今年在朋友圈里看到大家纷纷在相祝儿童节快乐，就也简单写两句，顺便当作近期的杂感记录。</p><p>昨天星期五，我结束了在积优的实习，时长总共六个月。不知道五月份的工资什么时候发，但我实习的目的从来绝对不是为了钱，尽管每天300元的薪酬确实很诱人也很有竞争力。记得最初选择实习的时候，我想着什么时候学不到东西了，我就结束实习。但是这周和大家说起结束实习的原因，我给出的答案却是临近期末，事情比较多，暑假要准备研究生，诸如此类的客观原因。</p><p>但是并不矛盾，不是么。从客观上来讲，确实事情很多，明天周日要准备两场答辩，周二还有计量小测和图数据论文汇报，周三还有预测分析的小组汇报，还有图数据的大作业。研究生的事情也没有着落，但我该报名的都报名了，就等着暑假呗。从主观上来说，确实感觉最近的学习内容有限了。因为我每周只去两天，导致潘老师没法给我开始新的大任务，只能小修小补一下之前的内容，以及干一些杂活。再继续呆下去的话，直到暑假之前应该都是这样，所以干脆退了吧，暑假我想了解一下投行这个行业，当然是后话了。</p><p>总结一下我的实习，感觉是有收获的，确实学到了许多东西，也做出了一些成果。这让我十分满意，也没有违背之前的初衷。以前和其他人打趣，总是说“来这别的没学会，学会了打羽毛球和掼蛋”，其实并非如此。最主要的肯定是那个高频回测框架了，三个引擎、数据流动、撮合逻辑，这些现在问我，都能娓娓道来，但是之前肯定是不知道的。还有各种细节，之前不知道的有关高频和市场的常识，都是课本上没有的。除此之外，还有一些软的知识，比如基金公司、产品与客户、生活与人际交往等，所以真是收获颇丰。当然也有羽毛球和掼蛋。这么一想，我做的其实还不错，从一切可能的地方，找一切可能的机会学习，还挺满意的。</p><p>都听说“世界是一个巨大的草台班子”，确实是这样。但是还是要肯定人的作用。来公司之后遇到了很多有意思的人，感激不尽。除了潘老师，还有涛哥、何老师、陈老师、峥姐、包姐等，还有最新一批次的在我之后进公司的实习生们。他们性格都更活泼一些，相处起来就很愉快。</p><p>后面的实习怎么安排呢？其实已经基本很模糊地确定了，就是投行，但是具体什么工作我也不知道，还不清楚。之前和陈硕说，“量化除了赚钱一点用都没有”，可能有些极端（笑）不过我确实更想具体地帮助到人，最好是具体地人，或许目前这样让我能有成就感吧。志愿者就是一个很好的例子，只可惜这学期我已经一次志愿者都没有当过了。如果投行如我想象中那样，投资项目，帮助实现项目落地，且工作很具体，能让我解决实际的问题，那我应该也能收获很多。如果不是这样，那我确实还要重新思考一下我的规划了。</p><p>还记得理想是什么吗？最近，一直有些感觉这个理想太空了，甚至开始觉得难以实现，但是还是不要有退缩或者放弃的想法。先把这学期熬过去吧，9月份一过，一切都会好起来的不是么？到时候，我要继续充实我的理想，并且真努力向理想迈进了，因为我认为当前的动摇是客观学业压力和作息不规律导致的结果。</p><p>既然聊到这了，那干脆直接畅想未来吧，这样总是让人心情舒畅。进入大四，首先我是没什么课程的。如果有实习，我就去实习；没有实习我就做项目，和老师做研究，到处做志愿者，去广西看看，去全国各地看看，和陈硕去玩，如果有女朋友的话也可以发展一下关系。多看书，多思考，多锻炼，多睡觉，把哲学补一补，自由地学习想学的东西，没有压力。哦对了，我还要回去看望一下老师，以及完成一些未完成的约定和计划。啊，这样的生活针不戳（大笑）</p><p>本科阶段其实是不打算谈恋爱的，因为不成熟，也有些回避。舍友前几天刚分手，刚刚又沐浴更衣，身上的香水味刺鼻但好闻，不知道干嘛去了。这样的爱情是我不喜欢的，其实我一直就觉得有些人的人品有点问题，当然可能只是不符合我的三观，况且形象是靠塑造的，我也根本无权对他人评头论足。说回恋爱这方面，如果大四解放了学业压力，那我可能会尝试找女朋友，不过可能会出现在我喜欢的和喜欢我的之间做选择的情况了，其实也不一定会有人喜欢我（雾）我觉得三观、性格、外表，这些都挺重要的。其实外表一般来说我都可以接受，真的让我很喜欢的颜值也很难出现；性格的话外向开朗一点就挺好，好相处，是个有趣的人最好；三观是最难的，也是最重要的，因为目前我认为我会为了实现理想而奋斗的，因此另一半能够和我有相近的理想抱负，我们才能一直走下去，并且生活的很好很充实。哇，这样的人好像有点难找，什么时候轮到哥们挑来挑去，搁着指指点点了，也不看看自己是什么货色。那只能等，所谓缘分咯。</p><p>今年和女生的接触和交流明显变多了，也不知道是主观的感觉还是客观的事实。反正就这样呗，坚守本心比较重要。学习，充实自己才是硬道理。</p><p>孩童时期总是无忧无虑的，可能是过的太舒服了，也没遇到什么困难和挑战，资源也很丰富。现在长大了才知道事情也并不总如人意，人与人不能一概而论，失败总是贯穿人生始终，想法和行动也很难达成一致。但我自认为还是幸运的，我遇到了很多好人，也有很多好人帮助我。所以就这样继续前行吧，或许人生确实真的很短暂，或许人确实真的很渺小呢。</p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mind-streaming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arboricity and Subgraph Listing Algorithms</title>
    <link href="/2024/04/29/%E5%AF%BB%E6%89%BE%E5%9B%BE%E4%B8%ADclique%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <url>/2024/04/29/%E5%AF%BB%E6%89%BE%E5%9B%BE%E4%B8%ADclique%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Arboricity and Subgraph Listing Algorithms (Norishige Chiba and TakaoNishizeki, 1985)</p><span id="more"></span><p>![[Arboricity and Subgraph ListingAlgorithms/Chiba-1985-arboricity.pdf]]</p><h2 id="abstract">Abstract</h2><p>In this paper we introduce a new simple strategy into edge-searchingof a graph, which is useful to the various subgraph listing problems.Applying the strategy, we obtain the following four algorithms. - Thefirst one lists all the triangles in a graph <span class="math inline">\(G\)</span> in <span class="math inline">\(O(a(G)m)\)</span> time, where <span class="math inline">\(m\)</span> is the number of edges of <span class="math inline">\(G\)</span> and <span class="math inline">\(a(\textG)\)</span> the arboricity of <span class="math inline">\(G\)</span>. -The second finds all the quadrangles in <span class="math inline">\(O(a(G)m)\)</span> time. Since <span class="math inline">\(a(G)\)</span> is at most three for a planar graph<span class="math inline">\(G\)</span>, both run in linear time for aplanar graph. - The third lists all the complete subgraphs <span class="math inline">\(K_l\)</span> of order <span class="math inline">\(l\)</span> in <span class="math inline">\(O(la(G)^{l-2}m)\)</span> time. - The fourth listsall the cliques in <span class="math inline">\(O(a(G)m)\)</span> timeper clique. All the algorithms require linear space. We also establishan upper bound on <span class="math inline">\(a(G)\)</span> for a graph<span class="math inline">\(G\)</span>: <span class="math inline">\(a(G)\leq [(2m+n)^{1/2}/2]\)</span>, where <span class="math inline">\(n\)</span> is the number of vertices in <span class="math inline">\(G\)</span>.</p><p>总结四个算法： - 找三角形 - 找四点形 - 找l阶完全子图 -找所有clique</p><h2 id="main">Main</h2><h3 id="introduction">1. Introduction</h3><p>主要策略：在图中找点，然后在这个点诱导子图中找符合要求的包含该点的东西。具体而言，根据点的非增的度数找（从最大度数往最小度数点找），找过了就删，避免重复。</p><p>参数解释：<span class="math inline">\(a(G)\)</span>是指图的荫度</p><blockquote><p>The <strong>arboricity</strong> of an undirected graph is the minimumnumber of forests into which its edges can be partitioned. Equivalentlyit is the minimum number of spanning forest needed to cover all theedges of the graph. The <a href="https://en.wikipedia.org/wiki/Nash-Williams_theorem" title="Nash-Williams theorem">Nash-Williams theorem</a> providesnecessary and sufficient conditions for when a graphis <em>k</em>-arboric.</p></blockquote><p>其余参数都是正常参数。</p><p>复杂度估计：略</p><h3 id="preliminaries">2. Preliminaries</h3><p>一些计算，略</p><h3 id="algorithm-for-listing-triangles">3. Algorithm for listingtriangles</h3><p>代码见附录</p><h3 id="algorithm-for-listing-quadrangles">4. Algorithm for listingquadrangles</h3><p>代码见附录</p><h3 id="algorithm-for-listing-complete-subgraphs">5. Algorithm forlisting complete subgraphs</h3><p>代码见附录</p><h2 id="appendix">Appendix</h2><p>![[寻找图中clique的算法/chiba.py]]</p><h2 id="问题">问题</h2><p>我的优化的算法比老算法还慢。感觉问题可能出现在inlist的搜索上。或许用dict+SortedList更快。</p>]]></content>
    
    
    <categories>
      
      <category>2024S</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图数据库</tag>
      
      <tag>文献研究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024.04.23 写在安泰春令营之后</title>
    <link href="/2024/04/23/%E5%86%99%E5%9C%A8%E5%AE%89%E6%B3%B0%E6%98%A5%E4%BB%A4%E8%90%A5%E4%B9%8B%E5%90%8E/"/>
    <url>/2024/04/23/%E5%86%99%E5%9C%A8%E5%AE%89%E6%B3%B0%E6%98%A5%E4%BB%A4%E8%90%A5%E4%B9%8B%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<p>标题本来想起成“写在保研失败之后”的，犹豫了一会，还是改成了写在安泰春令营之后。</p><p>今天晚上，安泰发了MF春令营offer。目前我还没有收到邮件，99%的可能是寄了。现在就是waiting和rejected的抉择了。因为根据bys的非官方统计，量化已经有4个offer，目前总共14个offer。offer应该不会分批发，没道理的，而且量化赛道的名额按比例也差不多满了。所以我大抵的确是寄了。</p><p>一个小时前刚收到通知的时候，我的心率绝对能飙到150+（也不一定，没什么概念），心脏在胸口扑通扑通狂跳，真担心自己突然嘎了。还好人还在。现在对入营的幻想也基本结束了，就等一封邮件和网站更新，像是犯人在死缓和死刑之间等判决。</p><p>我不知道自己这样的反应是不是正常。其实很像一场赌博，我压了几乎全部身家（这一个月的时间精力），最后却还是输了。其实输赢和我压了多少没有关系。其实我应该知道这一点的。</p><p>这次春令营失败，可以找很多理由。我得把它们写下来，因为我很有这么做的理由。春令营前我还在问老师有没有保研失败的人来给我们分享经验，结果现在我自己倒是可以给后人分享经验了，还有些好笑。1.自我感觉，最关键的一点是准备不足。唐老师在清明前就告诉我入营了，但我却没有好好准备，现在想来也可以说是罪有应得吧。清明节放三天，两天在高速上，什么也没看。后面的上课的日子，也没复习，课也没好好听，找学长学姐问经验倒是不少，但是tech和行为也都没怎么准备。笔试前一天还在疯狂复习线代，计划笔试完之后复习概统。结果笔试概统，全崩了。写到这里我感觉安泰今年还蛮看重笔试的？之前听说的笔试不重要，也纯属误导之言。面试也准备得不充分，自我介绍都说不流利。2.自制力太差了，太差了，太差了。计划制定得很丰满，全是自己唬自己，没有实际作用。老是不落实，这次失败就是后果。唉，这个问题影响我真的太久了！3.思想绝对出了问题。这里绝对有问题，上次去做生涯测试，老师无意的一句“你这种特质的人，抗压能力上面可能会有点弱”之类的话，让我一直记到现在，绝对有问题。我肯定是在不停地给自己心理暗示，没法做到不卑不亢了，心态真出问题了。现在在这里说不要紧，这个怎么解决，还得靠自己想。</p><p>感觉要出自我保护机制了，在这之前我得把和sjx的聊天记录放出来，这是之前回忆面试过程的珍贵记录，不能忽视。（虽然现在看有些小丑，真没有太重视啊，唉）</p><p>附聊天记录</p><pre><code class="hljs">Hiryan:张麒 覃筱 吴冲锋 刁训娣 （疑似）许源Hiryan:昨天面我的五个老师Hiryan:然而当时一个都不认识，也没上过任何课Hiryan:Turbulent:吴冲锋Turbulent:金工老登Turbulent:[笑]Turbulent:他们问点什么问题啊Turbulent:量化我还真不太知道Hiryan:金工我上的是宋颖达的Hiryan:吴冲锋先让我自我介绍Hiryan:2minHiryan:然后我有点超时Hiryan:他说婷婷Hiryan:我说让我说完最后两句话Hiryan:然后我高呼Hiryan:重铸安泰荣光，我辈义不容辞！Hiryan:说实话比较紧张，有点语无伦次Hiryan:然后覃筱率先发难Turbulent:[笑]Hiryan:说我高数还行，怎么概统也不行，商统也不行，计量也不行Hiryan:我的计量能力到底行不行Hiryan:我说行Turbulent:典Hiryan:她说那我考考你Hiryan:金融数据有哪些特征Hiryan:我刚开始有点楞，然后口胡Hiryan:说大数据下正态，小数据有可能偏态Hiryan:然后危急关头我突然想到这学期冯芸教的金融计量Hiryan:说应该是尖峰肥尾Hiryan:这个应该答到点子上了Hiryan:然后她问我那统计的时候要注意什么Hiryan:我说正态总体假设的检验不能用了，要改方法Turbulent:什么统计学家Hiryan:然后她让我举个例子，就好了Hiryan:然后刁训娣紧随其后Hiryan:问了我将实习经历归类，怎样锻炼出我适合量化的能力Hiryan:然后我语无伦次地开扯Hiryan:扯了一会，她绷不住了Hiryan:然后说，看我学了固收，考考我固收的问题啊Hiryan:然后问我债券风险和定价Hiryan:定价我说核心是现金流折现Hiryan:风险我刚开始说的是看收益率，然后又想起来说久期和凸性Hiryan:然后她顺便问了我久期和凸性区别是啥Hiryan:然后她问含权债券怎么定价Hiryan:我说利率树Turbulent:习老师可能就会点固收Hiryan:然后她问我怎么构造Turbulent:她可能也不会啥了Hiryan:我说二叉树，利率看成一个分布Hiryan:有二分之一概率往上，二分之一往下Hiryan:然后她问一定是二分之一吗Hiryan:这里我懵了一下Hiryan:然后她就过了Hiryan:然后是那个不认识的老师，也有可能是业界的Hiryan:问我实习Hiryan:一些程序设计上的问题Hiryan:然后是张麒Hiryan:英文问我实习Hiryan:md这个老师套路我Hiryan:先问公司开了多久Hiryan:然后问公司做期货占比多少Turbulent:[Sticker]Hiryan:最后问，高频回测框架这么重要的东西，公司以前为啥没有，为啥让我一个实习生第一次开发Turbulent:[笑]Turbulent:汗流浃背了Hiryan:我回答了两点Hiryan:第一是回测相比实盘而言，也没那么重要Hiryan:第二是，如果我能做好，那为啥不让我做Hiryan:把他整乐了Hiryan:我也不知道我怎么就这么回答了，还是用的英文Hiryan:最后就是吴冲锋，看到我的大创，顺口问了一句结论和数据Hiryan:然后就结束了</code></pre><p>坏了，刚看了一下量化的又破防了。怎么将近一半的人都拿了offer？？？草！不是哥们，录了7个人，一天上午下午面试这么多，我连前50%都进不去吗？</p><p>感觉是笔试问题很大，25分证明题爆零，前面还错一堆。</p><p>现在最重要的是，考虑接下来应该怎么做： 1.心态方面：首先这次春令营相当于白给的一次机会，所以挂了就挂了，问题不大。不能影响到后面的心态，当然也不能无所谓。这是一次很好的经验。福祸相依这个基本准则还是没变，塞翁失马焉知非福。当然也不能过于乐观和自大。2.行为方面：五一前的一个东西就是金融计量作业，这个我今晚也在做。还有图数据库。后天管院的MFE是另一个机会，要好好把握。1. 今晚等下出去散散步吧 2.明天一天是复习MFE笔试，真得好好规划好好看，还有机会，管院不是比安泰更好么？3.笔试完后两天，是期中周结束，五一前的日子。要总结一下半学期的学习生活。狠狠补随机过程了，也要狠狠补学校课程了，题目也得刷起来了。（感觉这些也是半个学期前我想的，然而。。。）4. 能不能把b站禁了，球球了TAT 3. 保研方面： 1. MFE 2. 安泰北京营？ 3.安泰上海营？</p><p>全部整理了一下，现在至少心率下来了。感觉还是有很多对不起的地方，对不起爸妈，对不起同学们，也对不起信任我的老师。或许真的是笔试拉了坨大的，这样就真纯是我自己的问题了。唉唉，现在后悔也没用，还得看行动。只要我真的努力了，而不是假努力，结果希望不会太差。</p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mind-streaming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于股指期货对冲的思考</title>
    <link href="/2024/03/31/%E5%85%B3%E4%BA%8E%E8%82%A1%E6%8C%87%E6%9C%9F%E8%B4%A7%E5%AF%B9%E5%86%B2%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2024/03/31/%E5%85%B3%E4%BA%8E%E8%82%A1%E6%8C%87%E6%9C%9F%E8%B4%A7%E5%AF%B9%E5%86%B2%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>股指期货对冲是为了降低风险。具体来说，是为了降低未来操作（出售资产）时有效价格的不确定性，即有效价格的方差。接下来均以一个单位股权资产为例，假设用<span class="math inline">\(h\)</span>单位股指期货做空对冲</p><p>不同时期的价格如下：</p><table><thead><tr class="header"><th>不对冲</th><th><span class="math inline">\(T_1\)</span></th><th><span class="math inline">\(T_2\)</span></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(1\)</span> Portfolio</td><td><span class="math inline">\(S\)</span></td><td><span class="math inline">\(S(1+R_P)\)</span></td></tr></tbody></table><table><thead><tr class="header"><th>对冲</th><th><span class="math inline">\(T_1\)</span></th><th><span class="math inline">\(T_2\)</span></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(1\)</span> Portfolio</td><td><span class="math inline">\(S\)</span></td><td><span class="math inline">\(S(1+R_P)\)</span></td></tr><tr class="even"><td><span class="math inline">\(h\)</span> Index future</td><td><span class="math inline">\(F\)</span></td><td><span class="math inline">\(F(1+R_M)\)</span></td></tr></tbody></table><p>采取对冲，有效价格为 <span class="math display">\[E=S(1+R_P)+hF-hF(1+R_M)\tag{1}\]</span></p><p>最小化其方差 <span class="math display">\[\begin{align}\min\text{Var}(E)&amp;=\text{Var}(S+SR_P-hFR_M)\\&amp;=S^2\text{Var}(R_P)+h^2F^2\text{Var}(R_M)-2hSF\text{Cov}(R_P,R_M)\\\end{align}\]</span></p><p><span class="math inline">\(R_P\)</span>和<span class="math inline">\(R_M\)</span>是随机变量，根据CAPM模型（或单因子模型）<span class="math display">\[R_P=r_f+\beta(R_M-r_f)+\varepsilon\]</span>这样，随机变量变成了<span class="math inline">\(R_M\)</span>和<span class="math inline">\(\varepsilon\)</span>。继续最小化方差 <span class="math display">\[\begin{align}\min\text{Var}(E)&amp;=S^2\beta^2\text{Var}(R_M)+S^2\text{Var}(\varepsilon)+h^2F^2\text{Var}(R_M)-2hSF\beta\text{Var}(R_M)\\&amp;=F^2\text{Var}(R_M)(h^2-\cfrac{2hSF\beta\text{Var}(R_M)}{F^2\text{Var}(R_M)})+S^2\beta^2\text{Var}(R_M)+S^2\text{Var}(\varepsilon)\\&amp;=F^2\text{Var}(R_M)(h-\beta\cfrac{S}{F})^2-\beta^2S^2\text{Var}(R_M)+S^2\beta^2\text{Var}(R_M)+S^2\text{Var}(\varepsilon)\\\min\rightarrow\text{Var}(E)&amp;=F^2\text{Var}(R_M)(h-\beta\cfrac{S}{F})^2+S^2\text{Var}(\varepsilon)\tag{2}\end{align}\]</span></p><p>所以 <span class="math display">\[h^*=\beta\cfrac{S}{F}\tag{3}\]</span></p><table style="width:6%;"><thead><tr class="header"><th>考虑有效价格的具体值，由(1)得 <span class="math display">\[\begin{align}E&amp;=S(1+R_P)+hF-hF(1+R_M)\\&amp;=S+SR_P-hFR_M\\&amp;=S+S(r_f+\beta(R_M-r_f+\varepsilon))-hFR_M\\&amp;=S(1+r_f)-S\beta r_f+(S\beta-hF)R_M+S\beta\varepsilon\tag{4}\end{align}\]</span></th></tr></thead><tbody><tr class="odd"><td>最后爆算一下Sharpe ratio： %% <span class="math display">\[\max S =\sqrt{\cfrac{\text{Var}(R_M)(1+r_f-\beta r_f)^2+\textE^2(R_M)\text{Var}(\varepsilon)}{2\text{Var}(R_M)\text{Var}(\varepsilon)}}\tag{8}\]</span>%% 此时， <span class="math display">\[h=\cfrac{S}{F}\left(\beta-\cfrac{\text{Var}(\varepsilon)\textE(R_M)}{(1+r_f-\beta r_f)\text{Var}(R_M)}\right)\tag{9}\]</span>在没算错的情况下，<span class="math inline">\(h\)</span>似乎始终大于<span class="math inline">\(h^*\)</span>，即完全对冲并不是最好的选择。</td></tr></tbody></table><p>总结两个结论： 1. 由(5)可得，在完全对冲情况下，<span class="math inline">\(\beta\)</span>较高的股票最终的有效价格反而越低 2.由(9)可得，考虑Sharpe Ratio，则完全对冲始终不是最好的选择。</p>]]></content>
    
    
    <categories>
      
      <category>2024S</category>
      
    </categories>
    
    
    <tags>
      
      <tag>金融学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024.03.18 近日杂思</title>
    <link href="/2024/03/18/%E6%9D%82%E6%80%9D/"/>
    <url>/2024/03/18/%E6%9D%82%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>好久没有写日记类的文章了，主要是因为又忙又懒。今天依然很忙，但是不能懒了，写点什么记录一下。</p><p>上周，包括这周，都是一堆事。正大杯、大创、盛宣怀杯、就像三座大山压着，还有一个石峰资产杯，也是一座小山。另外，课内的作业和知识也需要复习，随机过程的网课还需要回看。除此之外，还有研究生的事情需要花时间考虑。真可谓亚历山大，唉！</p><p>所以来随意谈论下抗压。人生任何时候都在抗压，没有压力就没有动力，这都是些老生常谈的话了，也是显然的。明日方舟仙术杯里也有抗压位，星际争霸2里也有抗压。抗压意味着高要求和高难度。仙术杯一共六个抗压位，似乎只有半数完成了三四连打的结局，获得了1.5倍加分。这些队伍显然也成为了赛事积分榜的前三名。SC2里抗压打多线，操作别人是顶尖选手的必备技能（lpn大招野人一拳除外）所以抗压确实难，但是一旦成功便可以很不错。</p><p>所以理念一定要对。抗压是一定要抗的，逃避是不行的。而且最好是化为日常，不要搞得很有仪式感，熬个大夜，一点屁用没有，纯弱智。规律作息，相信自己，慢慢来，思想要对。</p><p>前天和绿格的朋友们聚了聚，和同龄人在一起的感觉真的好极了。虽然还是去LaBamba，虽然还是长桌子有点尴尬，但是聊的还是很开心。感觉小团体还是有些排他性，但是真无所谓，大家爱交什么朋友就交什么朋友嘛，这也是很合理的。我还是尽量雨露均沾，毕竟被孤立或者说受冷漠的感觉挺不好的，还是尽量温暖他人。</p><p>晚上和图图姐一起打车回徐汇——我极少叫别人昵称，但是这里为了保护隐私还是说昵称吧，没错我指的是阿尔图罗——结果大概率把伞落在网约车上了。唉！我几乎每次离开某个地方都会回头检查有没有落下什么东西，顺便问一句“东西是不是都带了”，结果就这一次忘了检查，结果就把伞搞丢了。唉！这把伞还是母亲给我买的，几乎是全新的，平常我都没怎么用过，还是天堂伞的牌子，结果就弄丢了。我还没敢和父母讲，怕让他们伤心，唉！这次怎么就没有回头检查呢？这就是心乱了的结果，离谱。</p><p>先写到这吧，希望我能补好作业，并且做到规律作息。天无绝人之路，加油吧~</p><p>P.S. 最近在听Yoasobi的歌，疯狂听，很喜欢，感觉好好听啊！</p><p>P.S. 坚持做长期正确的事，这句话还蛮好的。</p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mind-streaming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复权详解</title>
    <link href="/2024/03/06/%E5%A4%8D%E6%9D%83%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/03/06/%E5%A4%8D%E6%9D%83%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>股票的除权与复权几乎是最基础的数据处理方法。但是考虑到分红、配股、送股、拆细等行为，计算有一定的复杂性。遂写此文，以明晰之。</p><h2 id="csmar数据库分配文件">CSMAR数据库—分配文件</h2><p><a href="https://data.csmar.com/lib/pdfjs/web/viewer.html?file=group1%2FM00%2FAA%2F99%2FCuIKV2XAnKiABeLbAB4nDGC5Ano840.pdf&amp;fname=%E8%82%A1%E7%A5%A8%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%B4%E6%98%8E%E4%B9%A6">股票市场交易数据库说明书 (csmar.com)</a></p><h3 id="基础介绍">基础介绍</h3><p>本数据库配股率、送股率、送红利和拆细率计算，举例说明如下： -配股率：若股东每100股可获配30股，此配股率为0.3 -送股率：若股东每100股可获得20股的送股，此送股率为0.2 -红利率：若股东每一股获送0.5元，此红利率为0.5 -拆细率：若股票每一股被拆成100股，则拆细率为100 -股权分置率：若股票每10股送2股，则股权分置率为0.2；若股票每10股缩为8股，则股权分置率为-0.2。</p><ul><li>分配比率为正值代表送股，为负值代表缩股。<ul><li>股权分置公式为：10*（1+分配比率）=分配结果。</li><li>对有送红股同时又有转增股票的，统一为送股类型，即实际送股率为送股率与转增率之和。如股东每100股可获得20股的送股，同时股东每100股获转增30股则在本数据库内送股率为0.5。</li></ul></li></ul><h3 id="符号说明">符号说明</h3><p>CA=现金红利，SD=送红股，RO=配股，DS=拆细，GQ=股权分置，SN=公开增发。</p><h2 id="一些常识">一些常识</h2><ul><li>除权日那天开盘时，股价已经除权了。</li><li>分红是给已有的股东权益，因此先分红，然后再其它操作。</li></ul><h2 id="后复权">后复权</h2><h3 id="原理">原理</h3><p>以除权前的价格为基准，修改除权后的价格。</p><h3 id="目的">目的</h3><p>看在历史某个时刻投入的资金，到今天能够有多少收益。</p><h3 id="核心思想">核心思想</h3><p>交易所展示的价格是每<strong>一股</strong>的价格。</p><h3 id="一个例子">一个例子</h3><p>假设A公司股票将在<span class="math inline">\(T\)</span>日进行分配操作。每一股分红<span class="math inline">\(D\)</span>；每一股送红股<span class="math inline">\(S\)</span>；每一股以<span class="math inline">\(P_R\)</span>价格进行配<span class="math inline">\(R\)</span>股；以<span class="math inline">\(P_O\)</span>价格共公开增发<span class="math inline">\(O\)</span>股；每一股拆细为<span class="math inline">\(K\)</span>股。（不考虑股权分置）</p><p>假设原来的总股本为<span class="math inline">\(N\)</span>，<span class="math inline">\(P^*_T\)</span>为后复权价，<span class="math inline">\(P_T\)</span>为除权价。 <span class="math display">\[\begin{align}&amp;P^*_T\times N - D\times N + P_R\times R+P_O\times O= P_T\times(N(K+S+R)+O)\\&amp;\Rightarrow P_T^*=\cfrac{P_T(N(K+S+R)+O)+DN-P_RR-P_OO}{N}\\&amp;\LeftrightarrowP_T^*=P_T(K+S+R+\cfrac{O}{N})+D-\cfrac{P_RR}{N}-\cfrac{P_OO}{N}\\&amp;\LeftrightarrowP_T^*=P_T(K+S+R+\cfrac{O}{N})+D-P_R\cfrac{R}{N}-P_O\cfrac{O}{N}\end{align}\]</span></p><p>假设原来的股东持有<span class="math inline">\(n\)</span>股，分红用来再投资，但不进行额外投资（配股、增发）<span class="math display">\[n^*=n\times(K+S)+\cfrac{nD}{P_T}\]</span></p><h3 id="细节">细节</h3><p>算收益率的时候，要考虑分红是否再投资，如果再投资，除权后的“一股”价格可能就不是除权前“持有的一股”，因此要进行修正。</p>]]></content>
    
    
    <categories>
      
      <category>2024S</category>
      
    </categories>
    
    
    <tags>
      
      <tag>专题整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天道酬勤</title>
    <link href="/2023/12/02/%E5%A4%A9%E9%81%93%E9%85%AC%E5%8B%A4/"/>
    <url>/2023/12/02/%E5%A4%A9%E9%81%93%E9%85%AC%E5%8B%A4/</url>
    
    <content type="html"><![CDATA[<p>李培楠夺冠的故事将永远激励着我。0.37%的夺冠概率，赛前仅80分的评分，没有什么是不可能的。</p><span id="more"></span><p><img src="/2023/12/02/%E5%A4%A9%E9%81%93%E9%85%AC%E5%8B%A4/98c30ec0e96367a21b6e5d59e8962d2.png"></p><blockquote><p>I want to say English to everyone like, even you still are normalpeople, you still can work the world champion and no one trust you!</p></blockquote><blockquote><p>“你看我都夺冠了，真的没有什么事情是不可能的。”</p></blockquote><div class="bilibili"><iframe src="//player.bilibili.com/player.html?aid=394348911&amp;bvid=BV1Ro4y1v7up&amp;cid=1005469189&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><p>附NGA老哥听译夺冠采访全文（改）：</p><p>Smix: You said this felt like a dream, but you are not waking upbecause I have to tell you something, you are the Intel Extreme Master’sworld champion!</p><p>Oliviera: I mean, like so many people sometime tell me like, youshould finish your Starcraft2, you should retire and maybe like youshould give up. But look at me know. (laugh)</p><p>Smix: Truly such an inspiration. You have fought so hard. This is thebest run that we have ever seen. You were 2 and 3 in the group stage.You said to yourself you did not expect to even make it out of groups.And then you went on to make the playoffs for the very first time. Youhad to take down Reynor. And then you had to take down herO. And now youjust took down a five time GSL champion to become the world champion!What does this mean for you?</p><p>Oliviera: I mean, I just want to tell us like you don’t need a GSLchampion, you don’t need like, ESL champion. I think I’m just like anormal man. Yeah I mean, I just practice very hard. Just time. Everydaylike twelve hours, fifteen hours, so much time. And you know I playedStarcraft pro game already 8 years right? I think so. And I neverthought I can be a world champion. Even now, I’m afraid maybe tomorrow Iwake up, it’s like a dream. (laugh) (applause cheers)</p><p>Smix: I think we can all agree this is why we love esports and thisis why we love Starcraft2. I’m gonna ask one quick question about thegames because, when I talked you about Maru, and you said, yeah I doplay and practice with him a lot and I lose a lot, but I also lost a lotagainst hero in practice and look what I did? Maybe a miracle canhappen. How did you prepare against Maru especially considering youpracticed against him so much. Is there something specific you plan forevery map?</p><p>Oliviera: Like I mean when start the grand final, I just tell myselfit doesn’t matter. Like you are world champion or maybe not worldchampion. I just love Starcraft2. And I enjoy this game. (cheers) Andyeah I'm enjoying on stage, playing Starcraft2. I love esport. And thankyou everyone to coming for watch. Who knows, I can be the worldchampion. I mean, I don’t know how to say, I’m so happy.(Cheers)</p><p>Smix: Time, I want to give you one last opportunity to say anythingyou want to your family, your friends, your fans watching online, thefans here in Poland. Anything you want to say?</p><p>Oliviera: So I want to, em, thank you for everyone, like you guysshow me that Starcraft2 is not deadgame. (Laugh) There are so manypeople! So many people to watch. And I complete my dream, I mean, evenit still feels not truth. But I want to say my family, use English anduse Chinese. And I want to use English first. I want to thank my dad.Like last time, I lose ESL Atlanta, like 0-3, um like 0-6, like no onegame won. And my father just tell me don’t give up. You are always thebest player in my heart. (Cheers) I want to say you guys thank you somuch for watching. My English is not very well but thank you so much!(Cheers) And I want to say some Chinese to my Chinese fans because nowso many Chinese people are still watching, it's already 5 a.m. I thinkso.我想对现在还在看直播的观众朋友们说，其实没有什么事情是不可能的，我都拿到世界冠军了，真的没有什么事情是不可能的。（哭腔）我觉得，我等到这个世界冠军太久了。我去年，去年真的很难，我上一次0-6输的时候我觉得星际争霸对我来说已经结束了，但是从上一次我一直告诉我自己，我可以再多练习，我可以再多练习，如果有一天真的拿到世界冠军了，或许可以证明，证明给大家。Inow want to say English to everyone like, even you still are normalpeople, you still can work the world champion and no one trust you.(哭腔)(欢呼)</p><p>Smix: Katowice give it up one last time for your Intel ExtremeMasters world champion, he is Oilviera! (Cheers) (全场高呼Oliviera)(李培楠捧杯)</p><p>李培楠夺冠的时候，应该是今年的2月初，上学期刚开始。当时，我也开始运营我的这个博客，直到现在。当时最初的几个月，我还经常用他激励自己，想着一定要把这件事情整理进网站，不过一直在拖延。这似乎也是我整个2023的缩影，一会打鸡血，一会又疯狂拖延，导致很多事情都没有做，整个大二的成绩也不是很理想。今天是2023年12月3日刚过0点，离期末考试又只有一个月了，这学期还是保研的关键学期，成绩非常重要。而最近我似乎又出现了怠惰的迹象。</p><p>希望李少的事迹能够一直激励我！关键还是要磨练出自己的心智，一定要坚持、努力，天道酬勤！</p><p><img src="/2023/12/02/%E5%A4%A9%E9%81%93%E9%85%AC%E5%8B%A4/fb289fd95e4c6391305ce580323b00f.png"></p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.10.22 一道二叉查找树编程题</title>
    <link href="/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <url>/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>我花了7个小时，做了一道不是作业题的编程题</p><span id="more"></span><p>今天下午4点半，我在图书馆开始看同学给的一道编程题。题目不难，补全二叉查找树的代码，思路也早就有，我想着5点前应该能差不多写完，再去吃晚饭，晚上再写公司金融的作业，美滋滋。</p><p>花了十几分钟写完代码，我发现问题没那么简单。老师给的案例是假的，根本不用排序。直接生成的二叉树就符合题意，真的是阴险。python程序代码老是报错，我开始高强度查网络资料。调代码，越调越精神。时间早过了5点了，要不就晚点吃饭，一鼓作气把这个代码写完再说。</p><p>大概调了一个小时，我发现不对劲了，这python的形参不能像cpp一样传给实参，真的逆天。<img src="/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/23f66d62809fae1ba6f052ad034fbef.png" alt="我向最好的硕神求助，他很猛，而且有求必应"></p><p>补充一下我需要解决的问题。我需要写一个insert函数，把值添加进二叉树里。但是二叉树在函数外面，不能直接通过函数修改。</p><p>然后我狂上网搜怎么传递参数，大概半个小时后，决定换一个方法，看看python有没有什么类似指针的东西。但是还是无功而返。又过了半个小时，我有点绷不住了，想看看网上人家怎么写二叉树的，怎么解决这个问题的。但是人家的思路和架构和老师给的完全不一样，我大脑高速运转，根本看不进去，而且也没有什么可以借鉴的东西，最后还是决定自己写吧。</p><p>大概晚上7点半，我想了半天，还是想看看python有没有指针啥的，不然太逆天了。半个小时后，我得出结论，cpp才是世界上最好的编程语言。还得出结论，思考问题而不愿意吃饭是完全可能的。</p><p>又过了半个小时，我转变了思路，想在函数外设置一个定位的变量，然后通过这个变量同步函数和树的处理位置，达到函数修改树的目的。于是我开始搜索学习命名空间的知识。</p><p>这个问题实际上我完全可以不去做。本身这只是同学问我的题目，而且我也没有这门课。但不知怎么的，我偏偏要和它死磕到底，强烈心理暗示：如果不做出来这题，我会没有心思做其它的任何事情。</p><p>搞了半个小时没搞出来，而图书馆9点钟关门，开始催人清场了。这几个小时，我一直在不停研究python里的函数形参和实参，处理的又是自定义的Node数据结构，甚至还研究了内存位置，想看看到底怎么把它们搞出来，晚饭一直都没有吃。</p><p>整理书包走回宿舍的过程中，我还在思考locals()和globals()命名空间的东西。但是确实有点饿。本来打算回宿舍再点外卖，但是这样耽误了来回拿外卖的时间。刚好回去路上路过一家罗森，我就决定买了一盒盒饭（但实际上是小龙虾味拌面），17元，带回宿舍吃，很方便。罗森9点关门，我刚好8点55买的饭，运气真的很不错。</p><p>罗森到宿舍还有一段距离，我端着温热的没开封的拌面在寒冷的天气里一路走，边走边整理了目前问题的几种思路、可能的解决方案和可能遇到的困难。到宿舍之后，我饿极了，直接开吃，并打开b站刷起了视频。</p><p>刷了大概一个小时，晚上10点了。我下定决心，今天怎么说也得把它做出来。然后我顺着前面整理的思路，又搜了搜资料。这下运气太好了，我找到了exec()和eval()函数。这两个函数有戏，我花了大概一个小时学习它们，又花了一个小时调试我的代码。终于在12点不到把这题解决了，无敌。</p><p>程序正确输出的时候，我激动得大喊大叫，还好宿舍里只有另一位舍友。虽然这个程序的意义没有上次那个脚本那么大，但我还是很高兴。我连忙把问题发给了硕神，因为知道他肯定会秒，所以特地留在我写出来之后问他。我又把结果发给了问我问题的那个同学。我说我做了7个小时，啥也没干就硬刚这道题。他说：“你那是自己有兴趣才写的。”</p><p>有兴趣吗？其实也不一定算得上。我只是很想做这道题，很想把它做出来。在4点半的时候，我就知道我一定能写出来的。7点的时候，我想如果没把这道题写出来，我今天晚上做什么事都没法好好做，虽然反复提醒自己沉没成本不是成本。10点的时候，我说如果我能做出来这道题，我就能克服很多看似难以克服的困难。12点，我终于把它做出来了。</p><p>回顾今天，我花了7个小时做一道简单的编程题。这个题非常基础，基本上计算机系的同学都会做，而且很快。但我却花了7个小时。实际上，我这么固执，也是想证明给自己看，我真的不是一个功利的人，我能够努力和专注到什么程度。这真的很重要。我把这段经历记录下来，希望未来自己也能有花7小时做一道无关紧要的简单题目的勇气和决心。</p><p>以下是珍贵作战记录： <img src="/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/42c6a565e3fd674623f620884536a03.png"> <img src="/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/8ef9c055bc5d7b01b43b371615df7a8.png"> <img src="/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/d6c3fca55e06da2a95f2ef37a0b32a1.png"><img src="/2023/10/21/%E4%B8%80%E9%81%93%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BC%96%E7%A8%8B%E9%A2%98/1093e47edf25831a8e16f82cf962565.png"></p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几道简单逻辑题</title>
    <link href="/2023/10/13/%E5%87%A0%E9%81%93%E7%AE%80%E5%8D%95%E9%80%BB%E8%BE%91%E9%A2%98/"/>
    <url>/2023/10/13/%E5%87%A0%E9%81%93%E7%AE%80%E5%8D%95%E9%80%BB%E8%BE%91%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>In (1-5), which inferences are correct? Give a proof (using inferencerules of PL and FOL) for each correct inference. <span id="more"></span></p><h2 id="section">1</h2><p><span class="math inline">\(A\rightarrow C\Rightarrow A\rightarrowB\rightarrow C\)</span></p><p>正确：因为<span class="math inline">\(A\rightarrowC\)</span>为T，右边恒为T</p><h2 id="section-1">2</h2><p><span class="math inline">\(\lnot(P\land\lnot Q),\lnot Q \lorR\Rightarrow P\lor R\)</span> <span class="math inline">\(\Leftrightarrow P\rightarrow Q,Q\rightarrowR\Rightarrow P\lor R\)</span></p><p>错误：若R为F，则Q为F，P为F，左边为T，右边为F，<span class="math inline">\(T\Rightarrow F\)</span>错误</p><h2 id="section-2">3</h2><p><span class="math inline">\(\forall x(Ax\rightarrow B),\lnot\forallx(Ax\rightarrow\lnot Cx)\Rightarrow B\)</span></p><p><span class="math display">\[\begin{align}&amp;(1)(UD)\ \ \ \ \forall x(Ax\rightarrow B)\Rightarrow \forallxAx\rightarrow B\\&amp;(2)(UD)\ \ \ \ \lnot\forall x(Ax\rightarrow\lnot Cx)\Rightarrow\lnot(\forall x Ax\rightarrow\forall x \lnot Cx)\\&amp;(3)(MI)\ \ \ \ \Leftrightarrow\lnot(\lnot\forall xAx\lor\forallx\lnot Cx)\\&amp;(4)(DMD)\ \ \ \ \Leftrightarrow\forall xAx\land\lnot\forall x\lnotCx\\&amp;(5)(DMU)\ \ \ \ \Leftrightarrow\forall xAx\land\exists xCx\\&amp;因为(5)为T，所以\forall xAx为T，所以原命题\Leftrightarrow\\&amp;(6)(MP)\forall xAx\rightarrow B, \forall xAx\Rightarrow B,成立\end{align}\]</span></p><h2 id="section-3">4</h2><p><span class="math inline">\(A,\lnot\exists x(Bx\land\lnotCx),\lnot\exists x(A\land \lnot Bx)\Rightarrow\exists xCx\)</span></p><p><span class="math display">\[\begin{align}&amp;(1)(DME)\ \ \ \ \lnot\exists x(Bx\land\lnotCx)\Leftrightarrow\forall x(\lnot Bx\lor Cx)\\&amp;(2)(MI)\ \ \ \ \Leftrightarrow\forall x(Bx\rightarrow Cx)\\&amp;(3)(UD)\ \ \ \ \Rightarrow\forall xBx\rightarrow\forall xCx\\&amp;(4)类似(2)(3)\ \ \ \ \lnot\exists x(A\land\lnot Bx)\LeftrightarrowA\rightarrow\forall xBx\\&amp;(5)(MP)\ \ \ \ A,A\rightarrow\forall xBx,\forallxBx\rightarrow\forall xCx\Rightarrow\forall xCx\\&amp;(6)(S3T3)\Rightarrow\exists xCx,成立\end{align}\]</span></p><h2 id="section-4">5</h2><p><span class="math inline">\(\forall xAx,\lnot\exists x(\lnot Ax\landBx),Bt\Rightarrow C\)</span></p><p><span class="math display">\[\begin{align}&amp;(DME)\ \ \ \ \lnot\exists x(\lnot Ax\land Bx)\Leftrightarrow\forallx(Bx\rightarrow Ax)\\&amp;所以左式\Leftrightarrow\forall xAx, \forall x(Bx\rightarrowAx),Bt\\&amp;取x=t,左式为T,而C可能为F,所以T\Rightarrow F不成立\\&amp;若C恒为T，则无论左式是T还是F，命题必然恒成立\end{align}\]</span></p><h2 id="补充">补充</h2><p>Material Implication (MI): <span class="math inline">\(P\rightarrowQ\Leftrightarrow \lnot P\lor Q\)</span></p><table><thead><tr class="header"><th>P</th><th>Q</th><th><span class="math inline">\(P\rightarrow Q\)</span></th></tr></thead><tbody><tr class="odd"><td>T</td><td>T</td><td>T</td></tr><tr class="even"><td>T</td><td>F</td><td>F</td></tr><tr class="odd"><td>F</td><td>T</td><td>T</td></tr><tr class="even"><td>F</td><td>F</td><td>T</td></tr></tbody></table><p><span class="math display">\[\begin{align}\forall x(Ax\lor\lnot Bx)\\\Leftrightarrow \forall x(\lnot Ax\rightarrow \lnot Bx)\\\textcolor{red}{\Rightarrow} \forall x\lnot Ax\rightarrow\forall x\lnotBx\\\Leftrightarrow\exists xBx\rightarrow\exists xAx\ \ \ \ (*)\\\\\forall x(\lnot Bx\lor Ax)\\\Leftrightarrow\forall x(Bx\rightarrow Ax)\\\textcolor{red}{\Rightarrow}\forall xBx\rightarrow\forall xAx\\\Leftrightarrow\lnot\forall xAx\rightarrow\lnot\forall xBx\\\Leftrightarrow\forall xBx\rightarrow\forall xAx\ \ \ \ (**)\end{align}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>哲学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逻辑学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Loyal to the beat</title>
    <link href="/2023/09/27/Loyal%20to%20the%20beat/"/>
    <url>/2023/09/27/Loyal%20to%20the%20beat/</url>
    
    <content type="html"><![CDATA[<blockquote><p>他就是规则，他就是常识。</p><p>他不是先锋，他已是顶峰。</p><p>王座上的灵魂，时代的象征。</p><p>《Loyal to the beat》，凯旋如约而至，请做好觉悟，高举金话筒——</p></blockquote><span id="more"></span><p><a href="https://monster-siren.hypergryph.com/music/048746">塞壬唱片- A WORLD FAMILIARLY UNKNOWN (hypergryph.com)</a></p><p>Yeah, It's the Emperor y'all, uh 大帝降临</p><p>Don't start with me I'll bring an end to all 莫搞事情 全场镇静</p><p>Uh, Uh-huh, Uh, yeah, listen 乖乖听令</p><p>You better kneel to the Boss 天下归心</p><p>(Uh-hmm)</p><p>I ain't come to play, I just come to slay 我从不花拳绣腿我必将横扫全场</p><p>Best believe today's your lucky day, once I touch the stage (uh-hmm)待我登台 请尽情享受我的光芒</p><p>Top spot forever, bruh that number never fluctuates 遥遥领先 兄弟数字从不撒谎</p><p>Hottest thing alive when I shine I set the sun ablaze 炙手可热烈日也要稍稍靠旁</p><p>Make the Winter season feel like Summer days 冰冷季节我会让你心中发烫</p><p>Forward 'cause there ain't no other way, no matter what awaits(uh-hmm) 莫问前路 只因无人能够阻挡</p><p>I am unafraid, I'll never runaway 我向来无惧 从不逃避</p><p>Best to do it, done it, did it, flipped it 'bout a hundred ways千百种方式 我不挑剔</p><p>I'm just saying... 无心之言 这就是大帝</p><p>Right?! I'm a winner bruh, you never equipped to win the fight我从无败绩 你毫无取胜之机</p><p>Against the Emperor, listen up are you men or mice? 想抵抗大帝还不快快掂量自己</p><p>I'm the pinnacle, quite formidable. Never seen the likes 无可匹敌巅峰的感觉多么孤寂</p><p>Of originals, making miracles, Y'all don't see the light?! 诞生自奇迹光芒不容置疑</p><p>Y'all got your eyes closed. Off into my zone 现在闭上双眼欢迎来到我的世界</p><p>Fly like a meteor, I'm in the media, they want to be up in my throne闪耀的流星 头条的宠儿 我的地位他们想要改写</p><p>Ride in the whip, yall gotta quit, got all of this on my own 迅猛出击统统出局 我掌握一切</p><p>Tryin' to hit me up on my phone, all that they get is the dial tone与我联系 明知结局 话筒忙音不灭</p><p>Take it all til there's nothing's left, that's just how you get itright 妄图追赶 还是徒劳无功</p><p>Yeah, they dying to be me, it's no wonder that they can't get a life挖空心思 自己的人生却未完工</p><p>Every time that they see me trying to eat off me like parasites如影随形 他们就像那寄生虫</p><p>No surprise. Only room at the top for one so step aside 意料之中王者只有一位 他们无此殊荣</p><p>This is Big E, get me, these posers are merely lowercase 大帝在此听我说 这些就是小打小闹 装腔作势</p><p>Out of this world, at a loss for words, you don't clearly know yourplace 语无伦次 搞不清主次 请认清你的位置</p><p>I put it down plain, I'm in the fast lane moving at a tortoise pace开诚布公 快车道上就我最巴适</p><p>So unbothered I got a permanent poker face, enjoy the race (Yeah)波澜不惊 摆上臭脸 开始享受赛事</p><p>I ain't come to play, I just come to slay 我从不花拳绣腿我必将横扫全场</p><p>Best believe today's your lucky day, once I touch the stage (uh-hmm)待我登台 请尽情享受我的光芒</p><p>Still number one, bruh these numbers never fluctuate 仍居榜首 兄弟数字从不撒谎</p><p>Put your drive to the test, see me, better pump your breaks 别说张狂试试你的加速度 怕你油门踩断也跟不上</p><p>Crew got more runners than the Summer games 参赛者众更胜那夏季至尊赛场</p><p>Forward 'cause there ain't no other way, no matter what it takes(uh-hmm) 莫问前路 只因无人能够阻挡</p><p>I am unafraid, I'll never runaway 我向来无惧 从不逃避</p><p>Best to do it, done it, did it, flipped it 'bout a hundred ways千百种方式 我不挑剔</p><p>I'm just saying… 无心之言 这就是大帝</p><p>Though! Yo! You dealing with a pro! (Oh) 尽管如此 记住你面前站着的是专业人士</p><p>Had to let'em know (Oh) They get ate like Ocho (uh hmm) 弱肉强食他们要认清现实</p><p>Don't make me embarrass you, keep that on the low low 低调做事给自己留点面子</p><p>P.L. crew up in this piece and your crew is a no show 企鹅物流到达你们已成为过去式</p><p>Loco, testing me and li'l homie solo 我与我的兄弟 随疯子你测试</p><p>Legend in the streets, on the mic a virtuoso 我是街头的传奇麦克风上的大师</p><p>They say that they're ready, for their sake, I really hope so对手说准备就绪 只能说希望如此</p><p>Out here making history you better snap a photo 记得按下快门见证历史</p><p>Fakers out here hating on me they don't want this work 黑子们咬牙切齿想要让我无法继续</p><p>Trying to knock me off the throne but your boy been known to swerve艳羡我的宝座 却不见自己大势已去</p><p>Wanna off me just get on but these peons are absurd 蠢蠢欲动在我眼里却是不可理喻</p><p>Ambitions of ascension but I keep their dreams deferred 野心勃勃梦想却只成为一场闹剧</p><p>Wanna knock me off the top but I'm laughing while they're reaching谋取我的宝座？笑看他们出师不利</p><p>I will never stop shining down on them like beacons 我如灯塔光芒普照四周</p><p>Grinding thru the weekend and I don't need a reason 不断磨练我不需要理由</p><p>Full throttle is my motto 'til I'm riding off the deep end 全速前进贯彻到底 直至坠入深沟</p><p>Doubt you want a problem, but keep on talking then it's bout to be你的自我诘问 是庸人自扰</p><p>They said the sky's the limit but they lied 'cause ain't no toppingme 他们说天是极限 但我说胡说八道</p><p>(Yeah) You ain't as live as me. How can there be a rivalry?你想与我比肩 这毫无可行性</p><p>Loneliest at the top you see I'm enjoying my privacy 高处不胜寒让我享受片刻清净</p><p>I am feeling so fresh (Yeah!) worked to be the best (Yeah!) 感觉良好我必全力以赴</p><p>Workin hard and playing hard and I don't need no rest (Yeah!)劳逸结合 从未停下脚步</p><p>Livin' like a King nothing but winners on my team (Yeah!) 我是国王胜者都将臣服于我朝堂</p><p>Going hard I know the cost, just blowing off some steam (Woo!)真刀真枪 我甚至都还没崭露锋芒</p><p>This is how I get it done just trying to have a little fun 找点乐子这是我的行事方式</p><p>I walk through fire, make rivers run, I been the one, not two (Ooh!)赴汤蹈火 天选之人在所不辞</p><p>So listen up, my dude, (Yeah) every member of my crew 所以听好了伙计们 我团队里每位同行人</p><p>Since little ones, weren't putting up with simpletons or fools从小到大 我便不能忍受蠢人</p><p>No giving up can't lose (Yeah!) won't take what I can't use (Yeah!)未尝败绩 这次我也将大获全胜</p><p>Spread my wing and stretching out cuz I'm about to get loose. (Yeah!)展翅飞翔 舒展全身</p><p>The Emperor will get on with anyone you choose (Yeah!)大帝能跟任何人相处得当 无论出身</p><p>Let'em tell it on the news. (Yeah!) When it's said and done I'mthrough! (ooh!) 新闻滚动 终成定局 目的地我早已直奔</p><p>It's the Emperor y'all 大帝降临</p><p>You better kneel to the Boss! 天下归心</p><p>(uh hmm)</p>]]></content>
    
    
    <categories>
      
      <category>明日方舟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.09.23 一盒红柚</title>
    <link href="/2023/09/23/%E4%B8%80%E7%9B%92%E7%BA%A2%E6%9F%9A/"/>
    <url>/2023/09/23/%E4%B8%80%E7%9B%92%E7%BA%A2%E6%9F%9A/</url>
    
    <content type="html"><![CDATA[<p>前天星期四晚上，我在校外跑步，给自己买了一盒红柚，15元。柚子很好吃，我感到很幸福。</p><span id="more"></span><figure><img src="/2023/09/23/%E4%B8%80%E7%9B%92%E7%BA%A2%E6%9F%9A/686f2cc93d200e008ff1daf2b34f4d4.jpg" alt="当时拍给爸妈看的照片"><figcaption aria-hidden="true">当时拍给爸妈看的照片</figcaption></figure><p>水果店在复兴中路上。当时我刚好跑完2km，想找辆自行车骑回去。沿着人行道随便乱走，路过这家水果店。有一个先生站在门口，边抽烟边隔着门帘和店主聊天。我低着头从他身边走过，一眼就看到了门口摆着的塑料盒子装的柚子。柚子都是剥好的，看着很诱人。要是是完整的，或许也不会激起我的冲动，但是剥好的柚子就不一样了，让人不禁想象下一刻就能放进嘴里品尝，老板真的很会做生意。</p><p>通常情况下，我是不会停下我的脚步的。这次也是如此，匆匆走了过去。但是走了几步路，我就在想为什么不买一盒尝尝呢？好久没有吃水果了，我也好想吃水果啊。对于吃，我向来是没有太多欲望的。这几天牙又疼，张大嘴巴都有些难受，本也想一如既往压制住自己的馋意，但是我想起了之前和jljj的聊天。她是一个非常好的人，认为活着的意义在于吃好吃的，我感觉她的观点也有一定道理，吃好吃的确实能让人感到愉悦。我又想柚子是水果，可以补充维生素，是有利健康的，所以完全没理由不买。于是我又往回走去。<img src="/2023/09/23/%E4%B8%80%E7%9B%92%E7%BA%A2%E6%9F%9A/58c5ecbd846e1e14952c33111bdf70c.png" alt="她说活着就是为了吃两口好的，我给她推荐了阿城的《棋王》——我最爱的书之一"></p><p>我放慢了脚步。抽烟的人仍然在和店主对话，店主手里正在用刀削一个石榴。我看到门口写着“白柚10元/盒”“红柚15元/盒”，犹豫了，继续往前走去。拿出手机，我给爸妈发了个信息。一方面，我想告知他们准备买一盒柚子；另一方面，我生怕买的质量不好，想问问他们现在是不是柚子上市的日子。<img src="/2023/09/23/%E4%B8%80%E7%9B%92%E7%BA%A2%E6%9F%9A/b754ee82ce60c850240233fb03266bd.png"></p><p>踯躅不前了一会，我看到那个抽烟的先生发现了我，估计是感觉我鬼鬼祟祟的，有些莫名。我问自己在纠结什么，下定决心直接走上前去，莽进了水果店的门，和店主说我想要买一盒柚子。吸烟者中断了和店主的交谈，水果店里顿时安静。“红的十五，白的十块。”我付了钱，说：“拿红的吧。”店主走到门口说：“好嘞，自己挑。”我也判断不出好坏多少，就直接拿了最顺手的一盒。刚准备走，他叫住我，帮我把柚子装进一个塑料袋里。</p><p>我拎着袋子离开了，世界又热闹了起来。走在路上，看着粉里透红的柚子，我很开心，因为这好像是第一次因为自己想吃而给自己买了水果，勤快一点，多吃点水果也挺好。我感觉自己成长了，因为这是第一次因为自己想吃而给自己买了水果。<img src="/2023/09/23/%E4%B8%80%E7%9B%92%E7%BA%A2%E6%9F%9A/565b6d6669690056b3c5dae39a0245b.png"></p><p>买完柚子后也不早了，共享单车稀少，一时半会找不到。我端着盒子走在人行道上，很想吃一口柚子，于是就吃了一口。非常好吃，又想把柚子带回宿舍吃，但是就一点点柚子，带回去似乎不方便也没必要。而且我如果带回了宿舍，必然会选择分给三位舍友，但只买了少数，4个人分略显寒碜，不大好看。</p><p>所以我干脆边走边吃柚子，边找共享单车。途中经过别的水果店，也看到有卖柚子的，红柚20元一包，但是很多，大概有4-5瓣的样子。我不知道自己究竟是赚了还是亏了。手机里爸妈还在给我提供解决牙疼的方法，让我买点罐头梨吃，说是去火的，我说回头再买吧，其实是我懒了。</p><p>总之，在那一刻的柚子真的很好吃，虽然它还是正常的味道，并没有形成什么美味。今天我的牙也好的差不多了，虽然它还是有点疼，得去治疗。我感到很幸福。</p><p>11.5 updated 一整个柚子就20元左右</p><p>橘子2-3元一斤，柚子3-4元一斤</p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红龙的誓言</title>
    <link href="/2023/09/19/%E7%BA%A2%E9%BE%99%E7%9A%84%E8%AA%93%E8%A8%80/"/>
    <url>/2023/09/19/%E7%BA%A2%E9%BE%99%E7%9A%84%E8%AA%93%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<div class="bilibili"><iframe src="//player.bilibili.com/player.html?aid=689459258&amp;bvid=BV1Hm4y1F7oo&amp;cid=870277763&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><p>This is a story of Victoria, a tale from the distant past. </p><p>这是很久很久以前的，维多利亚的故事</p><p>An era when Spring remained, an age before stone castles.</p><p>那时春天还没有离开大地，石头还没有垒成城堡</p><p>A time when a girl made friends with two crimson dragons.</p><p>小小的女孩与两条红龙成了朋友</p><p>One of them was greedy, but the other was true and brave.</p><p>一条红龙贪婪，另一条勇猛</p><p>Both swore for eternity to protect her beauty and grace.</p><p>他们都发誓，会永远守护在她身边</p><p>Everywhere they went, the girl would find and take</p><p>每当他们走到了新的一处，</p><p>the most beautiful flower growing in that place.</p><p>女孩就会去摘下那里最漂亮的花朵</p><p><br></p><p>Then one day came when the greedy one exclaimed,</p><p>直到有一天，贪婪的红龙向女孩开口：</p><p>"Grant me a gift, should you call yourself my friend."</p><p>“作为朋友，你为什么不送我一件礼物？”</p><p>With honeyed tongue it begged the girl to braid a wreath</p><p>他用花言巧语，想要换取一顶花环</p><p>with the flowers she had gathered, and the girl gladly agreed.  </p><p>他要将女孩一路上采下的花都编进其中，其中女孩则欣然答应</p><p>With deft hands she wove a beauteous floral garland,</p><p>女孩用她的巧手编好了美丽的花环，</p><p>and placed it around the head of the greedy red dragon.</p><p>为贪婪的红龙戴在了头顶。</p><p><br></p><p>Yet the dragon of courage said,</p><p>勇猛的红龙则说：</p><p>"No boon for me, no gift do I need,</p><p>“我要的不是礼物。</p><p>our journey is incomplete, and there's much for us to see."</p><p>我们的旅途还没有结束，前方还有许多风景。”</p><p>And thus, it departed alone and flew to the mountains beyond,</p><p>于是他独自离开，飞过了远方的群山。</p><p>where it created Tara, a kingdom to call its own.</p><p>在山的另一边，他建起了名为塔拉的王国。</p><p>The flowers that thrive here grow in no other land.</p><p>这里盛开的花，与其他任何地方都不同。</p><p>The domain was deemed perfect to adorn the girl's fine hand.</p><p>红龙想，自己会将独一无二的美景送到女孩的手中。</p><p><br></p><p>The wind told the greedy one of its kin's great findings.</p><p>风把这个消息带给了贪婪的红龙。</p><p>Speedily it flew towards Tara with the girl upon its wings.</p><p>他带着女孩，振翼飞向塔拉</p><p>And the greedy drake was awed, dazzled by the native bloom.</p><p>花朵的美艳摄人心魄，令他不住称赞</p><p>"Resplendent shall be our crown when we take that flower fromyou."</p><p>“只要有你这一朵花作为点缀，我的花冠就会熠熠生辉”</p><p>The good drake was speechless as greed pressed the demand.</p><p>面对这样贪婪的索求，勇猛的红龙无法答应。</p><p>There was nothing left of spring, but the blossom of its ownland.</p><p>对方已经将整个春天据为己有，而自己只有送给女孩的这一朵花了。</p><p><br></p><p>Long battled the dragons, a feud of naught but woe.</p><p>为此他们争执了很久，那场闹剧无比可悲</p><p>But greed emerged triumphant, the flower was then bestowed.</p><p>直到贪婪者得到了胜利，塔拉的花朵也被编进花环</p><p>Though the blossom suffered wounds and several petals were shed,</p><p>花朵已经残缺，几片花瓣被打落。</p><p>it became the brightest jewel upon the greedy dragon's head.</p><p>但在红龙的花冠上，它仍然是最夺目的明珠。</p><p>The girl secretly wept watching her friends fight and bleed.</p><p>女孩为自己朋友之间的争斗难过，却只能偷偷哭泣。</p><p>Then a lion snuck to her giving whispers that soothed her grief.</p><p>这时，一只狮子悄悄来到她身边，轻声细语让她不要担忧</p><p>And the lion told the girl that it had a very large pride,</p><p>狮子告诉女孩，他还有许多同族，</p><p>who would swear to protect her and vowed to stay by her side.</p><p>他们也会起誓保护她，陪伴在她身边。</p><p><br></p><p>So the girl forgot her sorrows and played with new-found friends,</p><p>与狮群作伴，让女孩忘记了伤心的事。</p><p>and no longer yearned for the drake who dwelt in distant lands.</p><p>生活在远方土地上的那条红龙，也不再令她挂念。</p><p>But the draken war barely ended when the lion pushed its claim.</p><p>但趁着两条红龙结束争执，狮子立刻露出獠牙</p><p>It seized the girl and roared, "Put the crown upon my mane!"</p><p>他挟持了女孩，高声咆哮着：“为我戴上那顶花冠！”</p><p>The good drake had not healed, but valiantly it challenged thethreat.</p><p>勇敢的红龙伤口还没有愈合，却依然挺身去对抗狮群的威胁</p><p>Not for the crown it fought and killed but the oath it swore tokept.</p><p>他不是为争夺花环而厮杀，只是不曾忘记自己最初立下的誓言。</p><p>But the pride was ready for war and spilled the dragon's blood.</p><p>他的鲜血流过的战场就是证词。</p><p>It drenched the fertile earth and turned it to barren mud.</p><p>塔拉原本丰饶的土地因此变得荒芜</p><p><br></p><p>The people grew cold and starved, now that winter has arrived.</p><p>现在冬天已经来临，这片土地上的人们忍受着饥饿与寒冷。</p><p>They remain cowed and silent, though a question lingered in mind.</p><p>他们不敢开口，却有一个问题始终萦绕在心间。</p><p>"Is it gone, our crimson dragon who lives beyond the peaks?</p><p>“我们的红龙是否还在？”</p><p>Is it gone, our virtuous guardian, the one with no greed?"</p><p>“那曾经君临顶点而无所贪图，誓守德行的红龙啊，它是否还在？”</p><p>Are you listening, Loughshinny?</p><p>拉芙希妮，你在听吗？</p><p>Can you...... and will you answer that question for us?</p><p>你们能够……你们会去回答那个问题吗？</p>]]></content>
    
    
    <categories>
      
      <category>明日方舟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL从删库到跑路</title>
    <link href="/2023/09/17/PostgreSQL%20cookbook/"/>
    <url>/2023/09/17/PostgreSQL%20cookbook/</url>
    
    <content type="html"><![CDATA[<p>参考了可亲的助教milk的教程和网络上的相关资料。</p><span id="more"></span><p>神中神网站：<a href="https://www.sjkjc.com/postgresql">PostgreSQL(sjkjc.com)</a></p><p><code>$</code>表示在命令行中输入代码。 pgSQL中大小写无所谓，随便用。分句用逗号<span class="math inline">\(,\)</span>结尾，整句用分号<span class="math inline">\(;\)</span>结尾</p><h1 id="intro">Intro</h1><h2 id="准备工作">0、准备工作</h2><h3 id="启动">（）（），启动！</h3><p>以管理员身份运行命令行 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 启动</span><br><span class="hljs-comment"># net start postgresql-x64-&lt;version&gt;</span><br><span class="hljs-variable">$</span> net <span class="hljs-built_in">start</span> postgresql<span class="hljs-literal">-x64-15</span><br><span class="hljs-comment"># 关闭</span><br><span class="hljs-comment"># net stop postgresql-x64-&lt;version&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="君权神授">君权神授</h3><ol type="1"><li>使⽤<code>psql</code>命令连接到PostgreSQL作为超级⽤户（通常是postgres）：<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>psql -U postgres<br></code></pre></td></tr></table></figure></li><li>现在您应该在psql命令⾏⼯具中。在这⾥，您可以使⽤以下SQL命令来创建⼀个新的⻆⾊：<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"># <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span> %<span class="hljs-type">name</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">LOGIN</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-string">&#x27;%password&#x27;</span> <span class="hljs-keyword">CREATEDB</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span> hsb <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">LOGIN</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-string">&#x27;feelansb&#x27;</span> <span class="hljs-keyword">CREATEDB</span>; <br></code></pre></td></tr></table></figure></li></ol><h3 id="一键输入密码懒狗专用">一键输入密码，懒狗专用</h3><p><a href="https://www.cnblogs.com/litmmp/p/5122534.html">PostgreSQL自动输入密码 - Litmmp - 博客园 (cnblogs.com)</a></p><ol type="1"><li>在C:\..\%APPDATA%路径下新建文件夹postgresql，再在这个文件夹中新建文件pgpass.conf</li><li>pgpass.conf的内容改为： <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#hostname:port:database:username:password</span><br><span class="hljs-symbol">localhost:</span><span class="hljs-number">5432</span><span class="hljs-symbol">:*</span><span class="hljs-symbol">:*</span><span class="hljs-symbol">:*</span><br></code></pre></td></tr></table></figure>前四个字段可以是确定的字面值，也可以使用通配符 *匹配所有。如果记录信息中包含 : 或 这两个符号，需要对其进行转义，就是在字符前面加转义符号  。</li><li>在环境变量-系统变量中新增一个变量，名为PGPASSFILE，值为pgpass.conf的路径</li></ol><h2 id="建库">1、建库！</h2><p>先启动！</p><h3 id="新建某数据库">新建某数据库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># createdb %name_of_db</span><br><span class="hljs-variable">$ </span>createdb mydb<br></code></pre></td></tr></table></figure><h3 id="检查有什么数据库">检查有什么数据库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>psql -l<br></code></pre></td></tr></table></figure><h3 id="进入某数据库">进入某数据库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>psql mydb<br></code></pre></td></tr></table></figure><p>结果： <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">psql (<span class="hljs-number">15.4</span>)<br>输入 <span class="hljs-string">&quot;help&quot;</span> 来获取帮助信息.<br><br><span class="hljs-attribute">mydb</span><span class="hljs-operator">=</span>&gt;<br></code></pre></td></tr></table></figure></p><h3 id="从某数据库退出">从某数据库退出</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">mydb</span><span class="hljs-operator">=</span>&gt; \q<br></code></pre></td></tr></table></figure><h2 id="开导">2、开导！</h2><p>先建库 <figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos"># psql -U <span class="hljs-built_in">%name</span> -<span class="hljs-keyword">d</span> <span class="hljs-built_in">%name</span>_of_db -f <span class="hljs-string">&quot;%dir&quot;</span><br>$ psql -U hsb -<span class="hljs-keyword">d</span> mydb -f <span class="hljs-string">&quot;\..\mydb.sql&quot;</span><br></code></pre></td></tr></table></figure> 结果： <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CREATE</span> TABLE<br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">CREATE</span> TABLE<br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">CREATE</span> TABLE<br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">CREATE</span> TABLE<br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><h3 id="如果不想看运行过程">如果不想看运行过程</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> psql mydb <span class="hljs-operator">-f</span> <span class="hljs-string">&quot;\..\mydb.sql&quot;</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | grep ERROR<br></code></pre></td></tr></table></figure><h2 id="检视数据库">3、检视数据库</h2><p>先导一下 <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">mydb</span><span class="hljs-operator">=</span>&gt; \d<br></code></pre></td></tr></table></figure> 结果： <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                 关联列表<br> 架构模式 |<span class="hljs-string">   名称    </span>|<span class="hljs-string">  类型  </span>|<span class="hljs-string">  拥有者</span><br><span class="hljs-string">----------+-----------+--------+-----------</span><br><span class="hljs-string"> public   </span>|<span class="hljs-string"> courses   </span>|<span class="hljs-string"> 数据表 </span>|<span class="hljs-string"> hsb</span><br><span class="hljs-string"> public   </span>|<span class="hljs-string"> enrolment </span>|<span class="hljs-string"> 数据表 </span>|<span class="hljs-string"> hsb</span><br><span class="hljs-string"> public   </span>|<span class="hljs-string"> staff     </span>|<span class="hljs-string"> 数据表 </span>|<span class="hljs-string"> hsb</span><br><span class="hljs-string"> public   </span>|<span class="hljs-string"> students  </span>|<span class="hljs-string"> 数据表 </span>|<span class="hljs-string"> hsb</span><br><span class="hljs-string">(4 行记录)</span><br></code></pre></td></tr></table></figure></p><h3 id="检视子数据表">检视子数据表</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL">mydb=&gt; \d staff<br></code></pre></td></tr></table></figure><p>结果： <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">数据表 <span class="hljs-string">&quot;public.staff&quot;</span><br>   栏位   |<span class="hljs-string">         类型          </span>|<span class="hljs-string"> 校对规则 </span>|<span class="hljs-string">  可空的  </span>|<span class="hljs-string"> 预设</span><br><span class="hljs-string">----------+-----------------------+----------+----------+------</span><br><span class="hljs-string"> userid   </span>|<span class="hljs-string"> character varying(10) </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> not null </span>|<br> name     |<span class="hljs-string"> character varying(30) </span>|<span class="hljs-string">          </span>|<span class="hljs-string">          </span>|<br> position |<span class="hljs-string"> character varying(20) </span>|<span class="hljs-string">          </span>|<span class="hljs-string">          </span>|<br> phone    |<span class="hljs-string"> integer               </span>|<span class="hljs-string">          </span>|<span class="hljs-string">          </span>|<br>索引：<br>    <span class="hljs-string">&quot;staff_pkey&quot;</span> PRIMARY KEY, btree (userid)<br>由引用：<br>    TABLE <span class="hljs-string">&quot;courses&quot;</span> CONSTRAINT <span class="hljs-string">&quot;courses_lecturer_fkey&quot;</span> FOREIGN KEY (lecturer) REFERENCES staff(userid)<br><br></code></pre></td></tr></table></figure></p><h3 id="展示子数据表">展示子数据表</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">mydb</span><span class="hljs-operator">=</span>&gt; select * from staff<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>结果： <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">  userid  |     <span class="hljs-type">name</span>      |    <span class="hljs-type">position</span>     | <span class="hljs-type">phone</span><br>----------+---------------+-----------------+-------<br> jingling | <span class="hljs-type">Jingling</span> Xue  | <span class="hljs-type">Professor</span>       | <span class="hljs-type">54889</span><br> jas      | <span class="hljs-type">John</span> Shepherd | <span class="hljs-type">Senior</span> Lecturer | <span class="hljs-type">56494</span><br> andrewt  | <span class="hljs-type">Andrew</span> Taylor | <span class="hljs-type">Senior</span> Lecturer | <span class="hljs-type">55525</span><br>(<span class="hljs-number">3</span> 行记录)<br></code></pre></td></tr></table></figure></p><h1 id="language">Language</h1><h2 id="select-statement">SELECT statement</h2><p><strong>SELECT</strong> &lt;attribute and function list&gt;<strong>FROM</strong> &lt;table list&gt; [<strong>WHERE</strong>&lt;condition&gt;] [<strong>GROUP BY</strong> &lt;groupingattribute(s)&gt;] [<strong>HAVING</strong> &lt;group condition&gt;][<strong>ORDER BY</strong> &lt;attribute list&gt;]</p><p>[]里面的不是必须</p><h3 id="select">SELECT</h3><p>就是正常的选择，相当于关系代数里的<strong>不去重的projection（纵切片）</strong></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> attr1<br></code></pre></td></tr></table></figure><ul><li>选择attr1列</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> attr1, attr2<br></code></pre></td></tr></table></figure><ul><li>选择attr1和attr2两列</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> *<br></code></pre></td></tr></table></figure><ul><li>选择所有列</li></ul><h4 id="distinct">DISTINCT</h4><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> attr1<br></code></pre></td></tr></table></figure><ul><li>不重复元素地选择attr1列</li><li><span class="math inline">\(\pi_{attr1}\)</span></li></ul><h4 id="as">AS</h4><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> attr1 <span class="hljs-keyword">AS</span> sb1, attr2 <span class="hljs-keyword">AS</span> sb2<br></code></pre></td></tr></table></figure><ul><li>选择attr1列作为sb1，选择attr2列作为sb2</li><li><span class="math inline">\(\rho_{\{sb1,sb2\}}()\)</span></li><li>只是显示的名字从attr1变成了sb1，原来table中的名字还是attr1不变，attr2同理</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> attr1+<span class="hljs-number">100</span> <span class="hljs-keyword">AS</span> sb<br></code></pre></td></tr></table></figure><ul><li>选择attr1列+100作为sb，也可以用运算</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> attr1, <span class="hljs-string">&#x27;like sb&#x27;</span> <span class="hljs-keyword">AS</span> sb<br></code></pre></td></tr></table></figure><p>结果</p><table><thead><tr class="header"><th>attr1</th><th>sb</th></tr></thead><tbody><tr class="odd"><td></td><td>like sb</td></tr><tr class="even"><td></td><td>like sb</td></tr><tr class="odd"><td><span class="math inline">\(\cdots\)</span></td><td><span class="math inline">\(\cdots\)</span></td></tr></tbody></table><ul><li>填充自定义内容作为新的一列，不改变原来的表格，掩耳盗铃</li></ul><h4 id="用aggregate-functions">用Aggregate Functions</h4><p>可以在SELECT里面用Aggregate函数</p><ul><li>SUM()</li><li>AVG()</li><li>MIN()</li><li>MAX()</li><li>COUNT()<ul><li>注意COUNT默认COUNT(ALL)，可以用COUNT(DISTINCT)</li><li>注意COUNT默认不计NULL，但是COUNT(*)计入NULL</li></ul></li></ul><h4 id="into">INTO</h4><p>表示从选择的结果中创建一个（临时的）新表 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">INTO</span> [<span class="hljs-keyword">TEMP</span>] film_copy<br><span class="hljs-keyword">FROM</span> film<br></code></pre></td></tr></table></figure></p><h3 id="from">FROM</h3><p>表示从什么表格里select，相当于关系代数里的 <strong>()</strong><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">FROM</span> R1<br></code></pre></td></tr></table></figure></p><ul><li>从R1中（选择）</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">FROM</span> R1,R2<br></code></pre></td></tr></table></figure><ul><li>从R1<span class="math inline">\(\times\)</span>R2中（选择），做CartesianProduct</li></ul><p>表现关系代数里<strong>join</strong>的功能 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">FROM</span> R1 <br><span class="hljs-keyword">NATURAL</span> <span class="hljs-keyword">JOIN</span> R2<br></code></pre></td></tr></table></figure></p><ul><li>R1和R2做自然连接，再从中进行选择</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">FROM</span> R1 <br><span class="hljs-keyword">JOIN</span> R2 <br><span class="hljs-keyword">ON</span> R1.attr1=R2.attr1<br></code></pre></td></tr></table></figure><ul><li>R1和R2根据attr1做equi-join，再从中进行选择</li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> b1.attr1, b2.attr1<br><span class="hljs-keyword">FROM</span> R1 b1, R2 b2<br></code></pre></td></tr></table></figure><ul><li><p>记R1为b1，R2为b2</p></li><li><p>自定义表格的记号，防止出现重复和方便书写 ### WHERE相当于关系代数里的<strong>selection</strong>，给选择加上限制条件<strong>（横切片）</strong> <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;hsb&#x27;</span><br></code></pre></td></tr></table></figure></p></li><li><p>选择name=hsb的tuple</p></li><li><p><span class="math inline">\(\sigma_{(name=&#39;hsb&#39;)}\)</span></p></li></ul><p>相当于关系代数里的<strong>join</strong>，连接符合条件的表格<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span>, course_id<br><span class="hljs-keyword">FROM</span> instructor, teaches<br><span class="hljs-keyword">WHERE</span> instructor.ID=teaches.ID <span class="hljs-keyword">AND</span> year=<span class="hljs-number">2010</span><br></code></pre></td></tr></table></figure></p><ul><li>对instructor和teaches表格做equi-join，并选择year=2010的tuples</li></ul><h4 id="subqueries">Subqueries</h4><h5 id="单结果">单结果</h5><p>若subquery返回只有一个tuple，可以把结果当作constantvalue，在WHERE语句中使用。 例子： Sells <img src="/2023/09/17/PostgreSQL%20cookbook/3a81dbaecb9b26325c8177cdbebcfa0.png"><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> bar<br><span class="hljs-keyword">FROM</span> Sells<br><span class="hljs-keyword">WHERE</span> beer=<span class="hljs-string">&#x27;New&#x27;</span> <span class="hljs-keyword">AND</span> price=(<br><span class="hljs-keyword">SELECT</span> price<br><span class="hljs-keyword">FROM</span> Sells<br><span class="hljs-keyword">WHERE</span> bar=<span class="hljs-string">&#x27;Coogee Bay Hotel&#x27;</span><br><span class="hljs-keyword">AND</span> beer=<span class="hljs-string">&#x27;Victoria Bitter&#x27;</span><br>)<br></code></pre></td></tr></table></figure> 这等价于 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> b2.bar<br><span class="hljs-keyword">FROM</span> Sells b1, Sells b2<br><span class="hljs-keyword">WHERE</span> b1.beer=<span class="hljs-string">&#x27;Victoria Bitter&#x27;</span> <span class="hljs-keyword">AND</span><br>  b1.bar=<span class="hljs-string">&#x27;Coogee Bay Hotel&#x27;</span> <span class="hljs-keyword">AND</span><br>  b1.price=b2.price <span class="hljs-keyword">AND</span><br>  b2.beer=<span class="hljs-string">&#x27;New&#x27;</span><br></code></pre></td></tr></table></figure></p><h5 id="多结果-in">多结果 IN</h5><p>若subquery返回多个结果，在WHERE中用IN表示 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Students <br><span class="hljs-keyword">WHERE</span> grade <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;HD&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>)<br></code></pre></td></tr></table></figure></p><ul><li><p>在grade的值为HD或D中选择 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Beers<br><span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> beer<br><span class="hljs-keyword">FROM</span> Likes<br><span class="hljs-keyword">WHERE</span> drinker=<span class="hljs-string">&#x27;John&#x27;</span><br>)<br></code></pre></td></tr></table></figure></p></li><li><p>在drinker的值为John中选择</p></li></ul><h5 id="exists">EXISTS</h5><p>存在，如果满足条件的tuple非空，则返回true</p><p>例子：Find the beers uniquely made by their manufacturer.<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span><br><span class="hljs-keyword">FROM</span> Beers b1<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> (<br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Beers<br><span class="hljs-keyword">WHERE</span> manf=b1.manf <span class="hljs-keyword">AND</span> <span class="hljs-type">name</span>!=b1.name<br>)<br></code></pre></td></tr></table></figure></p><ul><li>用NOT EXISTS找出不唯一生产某一种酒的制造商</li></ul><h5 id="allanysome">ALL/ANY（SOME）</h5><p>找全部符合条件的tuple，则返回True找存在某一个符合条件的tuple，则返回True</p><p>例子：Find the names of all instructors whose salary is greater thanthe salary of all instructors in the Physics department.<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span><br><span class="hljs-keyword">FROM</span> instructor<br><span class="hljs-keyword">WHERE</span> salary &gt; <span class="hljs-keyword">ALL</span>(<br><span class="hljs-keyword">SELECT</span> salary<br><span class="hljs-keyword">FROM</span> instructor<br><span class="hljs-keyword">WHERE</span> dept <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;Physics&#x27;</span><br>)<br></code></pre></td></tr></table></figure></p><ul><li>=ANY等价于IN</li><li>&lt;&gt;ALL等价于NOT IN</li></ul><h3 id="group-by">GROUP BY</h3><p>分组，分别应用aggregate function，相当于关系代数中的<span class="math inline">\(\gamma_{\{attr,agg\_func\}}\)</span>的第一个参数</p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> drinker,AVG(price)<br><span class="hljs-keyword">FROM</span> Frequents, Sells<br><span class="hljs-keyword">WHERE</span> beer=<span class="hljs-string">&#x27;New&#x27;</span> <span class="hljs-keyword">AND</span> Frequents.bar=Sell.bar<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> drinker<br></code></pre></td></tr></table></figure> 结果：</p><table><thead><tr class="header"><th>Drinker</th><th>AVG(price)</th></tr></thead><tbody><tr class="odd"><td>Adam</td><td>2.25</td></tr><tr class="even"><td>John</td><td>2.25</td></tr><tr class="odd"><td>Justin</td><td>2.5</td></tr></tbody></table><ul><li>要求：SELECT后面跟的Attribute必须要么在Aggregatefunction里出现，要么在GROUP BY语句里出现</li></ul><h3 id="having">HAVING</h3><p>在GROUP BY后面用，限制<strong>分组的条件</strong></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> bar, MIN(price)<br><span class="hljs-keyword">FROM</span> Sells<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Bar<br><span class="hljs-keyword">HAVING</span> MIN(price)&gt;<span class="hljs-number">2.3</span><br></code></pre></td></tr></table></figure> 结果：</p><table><thead><tr class="header"><th>Bar</th><th>MIN(price)</th></tr></thead><tbody><tr class="odd"><td>Australia Hotel</td><td>3.5</td></tr><tr class="even"><td>Coogee Bay Hotel</td><td>2.25</td></tr><tr class="odd"><td>Lord Nelson</td><td>3.75</td></tr><tr class="even"><td>Marble Bar</td><td>2.8</td></tr><tr class="odd"><td>Royal Hotel</td><td>2.3</td></tr><tr class="even"><td><span class="math inline">\(\cdots\)</span></td><td><span class="math inline">\(\cdots\)</span></td></tr></tbody></table><h3 id="order-by">ORDER BY</h3><p>对最后结果的表格排序，升序ASC(ascend)、降序DESC(descend)<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span> column1, column2,...<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column1, column2,... <span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure></p><h2 id="functions">Functions</h2><p>可以以多种形式调用 - 在SELECT语句中调用 -<code>SELECT myFunction(arg1, arg2);</code> -<code>SELECT * FROM myTableFunction(arg1, arg2)</code> -直接使用，或在另一个PLpgSQL函数中调用 -<code>PERFORM myVoidFunction(arg1, arg2);</code> -<code>result:=myOtherFunction(arg1);</code> - 在Trigger中自动使用</p><h3 id="基本语法">基本语法</h3><h4 id="sql">SQL</h4><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span><br>funcName(arg1type, arg2type, ...)<br><span class="hljs-keyword">RETURNS</span> rettype<br><span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">SQL</span> statements</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">sql</span>;<br></code></pre></td></tr></table></figure><ul><li>RETURNS返回的是<strong>最后</strong>一个SQL语句</li><li>rettype可以是一个table: RETURNS set of<ul><li>但是好像只是用这个table的schema，因此要求列数匹配</li></ul></li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">-- set of Bars from specified suburb</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span><br>hotelsIN(<span class="hljs-type">TEXT</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> Bars<br><span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Bars <span class="hljs-keyword">WHERE</span> addr=<span class="hljs-meta">$1</span>;</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">sql</span>;<br><br><span class="hljs-comment">-- usage examples</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> hotelsIn(<span class="hljs-string">&#x27;The Rocks&#x27;</span>);<br></code></pre></td></tr></table></figure><p>结果： <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">name            | addr      | license</span><br><span class="hljs-section">----------------+-----------+---------</span><br>Australia Hotel | The Rocks | 123456<br>Lord Nelson     | The Rocks | 123888<br></code></pre></td></tr></table></figure></p><h4 id="plpgsql-function">PL/pgSQL Function</h4><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span><br>funcName(param1, param2, ...)<br><span class="hljs-keyword">RETURNS</span> rettype<br><span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">DECLARE</span></span><br><span class="language-pgsql">varibale declarations</span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql">code <span class="hljs-keyword">for</span> <span class="hljs-keyword">function</span></span><br><span class="language-pgsql"><span class="hljs-keyword">END</span>;</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br></code></pre></td></tr></table></figure><ul><li>参数用位置来引用$1, $2</li><li>或者用别名alias<ul><li>在函数header中用(e.g. f(a int, b int))</li><li>在declaration中用(e.g. a alias for $1; b alias for $2)</li></ul></li></ul><p>例子1（船新写法）： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span><br><span class="hljs-keyword">add</span>(x <span class="hljs-type">TEXT</span>, y <span class="hljs-type">TEXT</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">TEXT</span><br><span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">DECLARE</span></span><br><span class="language-pgsql">result <span class="hljs-type">TEXT</span>; <span class="hljs-comment">--local variable</span></span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql">result := x||&quot;&quot;||y;</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURN</span> result;</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span>;</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br></code></pre></td></tr></table></figure></p><p>例子2（都什么年代，还在用传统写法）： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span><br>cat(<span class="hljs-type">TEXT</span>, <span class="hljs-type">TEXT</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">TEXT</span><br><span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">DECLARE</span></span><br><span class="language-pgsql">x <span class="hljs-keyword">ALIAS</span> <span class="hljs-keyword">FOR</span> <span class="hljs-meta">$1</span>; <span class="hljs-comment">--alias for parameter</span></span><br><span class="language-pgsql">y <span class="hljs-keyword">ALIAS</span> <span class="hljs-keyword">FOR</span> <span class="hljs-meta">$2</span>; <span class="hljs-comment">--alias for parameter</span></span><br><span class="language-pgsql">result <span class="hljs-type">TEXT</span>; <span class="hljs-comment">--local variable</span></span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql">result := x||&quot;&quot;&quot;&quot;||y;</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURN</span> result;</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span>;</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br></code></pre></td></tr></table></figure></p><p>PLpgSQL允许函数重载<strong>function overloading</strong> (i.e. samename, different arg types) - 就是说，可以同一个函数名，不同的参数 -但是不能同一个函数名，相同的参数，不同的返回值 -这条是对应CREATE的，一般还是建议写CREATE OR REPLACE</p><h3 id="声明data-types">声明Data Types</h3><ul><li>正常声明<ul><li><code>quantity INTEGER</code></li></ul></li><li>声明为和某个变量一样<ul><li><code>start_quantity quantity%TYPE</code></li></ul></li><li>声明为和某个表（包含其中所有列）一样<ul><li><code>employee Employees%ROWTYPE</code></li></ul></li><li>声明为和某个表中的某个列一样<ul><li><code>name Employees.name%TYPE</code></li></ul></li></ul><p>用%声明像引用一样，好就好在修改的时候可以自动保持更新</p><h3 id="return">RETURN</h3><ul><li>An atomic data type (e.g. integer, text, ...)<ul><li><code>RETURNS INTEGER</code></li></ul></li><li>A tuple (e.g. table record type or tuple type)<ul><li><code>RETURNS Employee</code></li></ul></li><li>A set of atomic values (like a table column)<ul><li><code>RETURNS SETOF FLOAT</code></li></ul></li><li>A set of tuples (i.e. a table)<ul><li><code>RETURNS SETOF Employee</code></li><li>Similar to a view</li></ul></li><li><strong><em>void</em></strong> (i.e. no return value)</li></ul><h3 id="控制结构">控制结构</h3><h4 id="条件判断">条件判断</h4><ul><li>IF ... THEN</li><li>IF ... THEN ... ELSE</li><li>IF ... THEN ... ELSIF ... THEN ... ELSE</li></ul><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">IF</span> v_user_id&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">UPDATE</span> users <span class="hljs-keyword">SET</span> email = v_email <span class="hljs-keyword">WHERE</span> user_id = v_user_id;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br></code></pre></td></tr></table></figure></p><h4 id="迭代循环">迭代（循环）</h4><p>平平无奇的LOOP <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">LOOP</span><br><span class="hljs-keyword">Statement</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">LOOP</span><br><span class="hljs-comment">-- some computations</span><br><span class="hljs-keyword">EXIT</span> <span class="hljs-keyword">WHEN</span> count&gt;<span class="hljs-number">0</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;<br></code></pre></td></tr></table></figure></p><p>带FOR循环的LOOP <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">FOR</span> int_var <span class="hljs-keyword">IN</span> low .. high <span class="hljs-keyword">LOOP</span><br><span class="hljs-keyword">Statement</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">FOR</span> i <span class="hljs-keyword">IN</span> <span class="hljs-number">1.</span><span class="hljs-number">.10</span> <span class="hljs-keyword">LOOP</span><br><span class="hljs-comment">-- Statement</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;<br></code></pre></td></tr></table></figure></p><h2 id="其它运算">其它运算</h2><h3 id="set-operations">Set Operations</h3><p>下面的运算均为集合运算，去重了。如果不要去重，在后面加ALL，比如UNIONALL #### UNION Find courses that ran in Fall 2009 <strong>or</strong> inSpring 2010 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL">(<span class="hljs-keyword">SELECT</span> course_id <br><span class="hljs-keyword">FROM</span> section <br><span class="hljs-keyword">WHERE</span><br>sem = <span class="hljs-string">&#x27;Fall&#x27;</span> <span class="hljs-keyword">AND</span> year = <span class="hljs-number">2009</span>) <br><br><span class="hljs-keyword">UNION</span><br><br>(<span class="hljs-keyword">SELECT</span> course_id <br><span class="hljs-keyword">FROM</span> section <br><span class="hljs-keyword">WHERE</span> sem = <span class="hljs-string">&#x27;Spring&#x27;</span> <span class="hljs-keyword">AND</span> year = <span class="hljs-number">2010</span>)<br></code></pre></td></tr></table></figure></p><h4 id="intersect">INTERSECT</h4><p>Find courses that ran in Fall 2009 <strong>and</strong> in Spring2010 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL">(<span class="hljs-keyword">SELECT</span> course_id <br><span class="hljs-keyword">FROM</span> section <br><span class="hljs-keyword">WHERE</span><br>sem = <span class="hljs-string">&#x27;Fall&#x27;</span> <span class="hljs-keyword">AND</span> year = <span class="hljs-number">2009</span>) <br><br><span class="hljs-keyword">INTERSECT</span><br><br>(<span class="hljs-keyword">SELECT</span> course_id <br><span class="hljs-keyword">FROM</span> section <br><span class="hljs-keyword">WHERE</span> sem = <span class="hljs-string">&#x27;Spring&#x27;</span> <span class="hljs-keyword">AND</span> year = <span class="hljs-number">2010</span>)<br></code></pre></td></tr></table></figure></p><h4 id="except">EXCEPT</h4><p>Find courses that ran in Fall 2009 <strong>but not</strong> in Spring2010 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL">(<span class="hljs-keyword">SELECT</span> course_id <br><span class="hljs-keyword">FROM</span> section <br><span class="hljs-keyword">WHERE</span><br>sem = <span class="hljs-string">&#x27;Fall&#x27;</span> <span class="hljs-keyword">AND</span> year = <span class="hljs-number">2009</span>) <br><br><span class="hljs-keyword">EXCEPT</span><br><br>(<span class="hljs-keyword">SELECT</span> course_id <br><span class="hljs-keyword">FROM</span> section <br><span class="hljs-keyword">WHERE</span> sem = <span class="hljs-string">&#x27;Spring&#x27;</span> <span class="hljs-keyword">AND</span> year = <span class="hljs-number">2010</span>)<br></code></pre></td></tr></table></figure></p><h3 id="修改数据类型">修改数据类型</h3><h4 id="cast">CAST/::</h4><p>用CAST修改数据类型（通用），这等价于::（仅pgsql可用）<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL">CAST (expression <span class="hljs-keyword">AS</span> target_type)<br><br>expression :: target_type<br></code></pre></td></tr></table></figure></p><h2 id="窗口函数">窗口函数</h2><h3 id="rank">RANK</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">SELECT</span><br>rank()<br><span class="hljs-keyword">over</span>(<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> partition_column_list]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> order_column_list]<br>)<br></code></pre></td></tr></table></figure><p>正常的排序，PARTITION里面是类似于分组别比较，ORDER是决定rank的顺序，输出为一列rank</p><h1 id="operations">Operations</h1><h2 id="建表">建表</h2><h3 id="create">CREATE</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"># <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> %name_of_table (<br>%attribute1 %datatype [%properties],<br>%attribute2 %datatype [%properties],<br>...<br>[%table_property1],<br>[%table_property2],<br>...<br>);<br></code></pre></td></tr></table></figure><h3 id="添加表约束-constraints">添加表约束 Constraints</h3><h4 id="primary-key">PRIMARY KEY</h4><p>单attribute作为主键，直接在后面加PRIMARY KEY <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>id <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">45</span>)<br>);<br></code></pre></td></tr></table></figure></p><p>或者，多attributes作为主键 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>com_id <span class="hljs-type">INTEGER</span>,<br>user_number <span class="hljs-type">INTEGER</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">45</span>),<br><span class="hljs-keyword">PRIMARY KEY</span>(com_id, user_number)<br>);<br></code></pre></td></tr></table></figure></p><h4 id="foreign-key">FOREIGN KEY</h4><p>添加外键约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span>(<br>column_defination_1,<br>...<br>[<span class="hljs-keyword">CONSTRAINT</span> foreign_key_name]<br><span class="hljs-keyword">FOREIGN KEY</span> (<span class="hljs-keyword">column</span>)<br><span class="hljs-keyword">REFERENCES</span> parent_table_name (<span class="hljs-keyword">column</span>)<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> ...<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> ...<br>)<br></code></pre></td></tr></table></figure></p><ul><li><code>ON DELETE</code> 和 <code>ON UPDATE</code> 指定了删除或更新父表中的行时要采取的约束策略。你可以使用以下5 个策略中的一个：<ul><li><code>NO ACTION</code>: 这是默认的策略。</li><li><code>RESTRICT</code>:如果父表中的一行在该表中有匹配的行，试图删除或更新父表中行时会引发PostgreSQL 错误。</li><li><code>CASCADE</code>：如果父表中的一行被删除或更新，该表中匹配行的值会自动删除或更新。</li><li><code>SET NULL</code>：如果父表中的一行被删除或更新，该表中匹配行的值设置为 <code>NULL</code>。</li><li><code>SET DEFAULT</code>:如果父表中的一行被删除或更新，该表中匹配行的值设置为默认值。</li></ul></li></ul><h4 id="not-null">NOT NULL</h4><p>添加非空约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> (<br>...<br><span class="hljs-built_in">column_name</span> data_type <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>...,<br>...<br>)<br></code></pre></td></tr></table></figure></p><h4 id="unique">UNIQUE</h4><p>添加某一列为唯一约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> (<br>...,<br><span class="hljs-built_in">column_name</span> data_type <span class="hljs-keyword">UNIQUE</span>,<br>)<br></code></pre></td></tr></table></figure></p><p>添加多列为唯一约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span>(<br>column_name1 column_definition,<br>column_name2 column_definition,<br>...,<br>[<span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-built_in">constraint_name</span>]<br><span class="hljs-keyword">UNIQUE</span>(column_name1, column_name2)<br>)<br></code></pre></td></tr></table></figure></p><h4 id="check">CHECK</h4><p>自定义约束。可以对某个列约束，也可以对整个表约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL">[CONSTAINT <span class="hljs-built_in">constraint_name</span>]<br><span class="hljs-keyword">CHECK</span>(expr)<br></code></pre></td></tr></table></figure></p><ul><li>LIKE不能用，要用~，但是不知道为啥</li></ul><h2 id="修改表">修改表</h2><h3 id="alter">ALTER</h3><p>选取要修改的表 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span><br></code></pre></td></tr></table></figure></p><h4 id="添加add">添加ADD</h4><p>添加列 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Bars<br><span class="hljs-keyword">ADD</span> phone <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;Unlisted&#x27;</span><br></code></pre></td></tr></table></figure></p><ul><li>DEFAULT写明默认值，如果没写，默认为NULL</li></ul><p>添加约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Persons <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY KEY</span>(ID)<br></code></pre></td></tr></table></figure></p><h4 id="删除drop">删除DROP</h4><p>删除列 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] <span class="hljs-built_in">column_name</span> [<span class="hljs-keyword">RESTRICT</span> | <span class="hljs-keyword">CASCADE</span>]<br>[, <span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] ...];<br></code></pre></td></tr></table></figure></p><ul><li>解释说明：<ul><li><code>table_name</code> 是要在其中添加列的表。</li><li><code>DROP [COLUMN] ...</code> 子句用来删除一个列。其中 <code>COLUMN</code> 关键字是可以省略的。如果要在一个语句中删除多个列，请使用多个逗号分隔的 <code>ADD [COLUMN] ...</code> 子句。</li><li><code>IF EXISTS</code> 是可选的，它可以避免因为给出的列名不存在而导致的错误。</li><li><code>column_name</code> 是要删除的列的名字。</li><li><code>CASCADE | RESTRICT</code> 是可选的，它指示了如果有其他对象（比如外键、视图、触发器、存储过程等）引用了要删除的列的处理策略。其中：<ul><li><code>CASCADE</code> - 允许删除此列和引用此列的对象。</li><li><code>RESTRICT</code> -如果有对象引用此列，拒绝删除此列，并给出错误。它是默认的选项。</li></ul></li></ul></li><li>从表中删除一列时，PostgreSQL将自动删除所有涉及删除列的索引和约束。</li></ul><p>删除约束 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Persons <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY KEY</span><br></code></pre></td></tr></table></figure></p><h2 id="删除表">删除表</h2><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"># <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> %name_of_table<br>$ <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> person<br></code></pre></td></tr></table></figure><h2 id="插入数据">插入数据</h2><h3 id="insert">INSERT</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Relation <span class="hljs-keyword">VALUES</span> (val1,val2,val3,...)<br></code></pre></td></tr></table></figure><h4 id="subquery">Subquery</h4><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgreSQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Relation (Subquery)<br></code></pre></td></tr></table></figure><p>例子： Populate a relation of John's potential drinking buddies (i.e.people who go to the same bars as John). <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DrinkingBuddies(<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DrinkingBuddies(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> f2.drinker<br><span class="hljs-keyword">FROM</span> Frequents f1, Frequents f2<br><span class="hljs-keyword">WHERE</span> f1.drinker=<span class="hljs-string">&#x27;John&#x27;</span><br><span class="hljs-keyword">AND</span> f2.drinker!=<span class="hljs-string">&#x27;John&#x27;</span><br><span class="hljs-keyword">AND</span> f1.bar=f2.bar<br>)<br></code></pre></td></tr></table></figure></p><h2 id="删除数据">删除数据</h2><h3 id="delete">DELETE</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">Table</span><br><span class="hljs-keyword">WHERE</span> Condition<br></code></pre></td></tr></table></figure><p>例子： Justin no longer likes Sparking Ale. <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Likes<br><span class="hljs-keyword">WHERE</span> drinker=<span class="hljs-string">&#x27;Justin&#x27;</span><br><span class="hljs-keyword">AND</span> beer=<span class="hljs-string">&#x27;Sparking Ale&#x27;</span><br></code></pre></td></tr></table></figure></p><ul><li>注意，DELETE和DROP不一样</li></ul><h2 id="更新数据">更新数据</h2><p>已经有了一些tuples，但是想要更新其中的部分值</p><h3 id="update">UPDATE</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">UPDATE</span> R<br><span class="hljs-keyword">SET</span> list <span class="hljs-keyword">of</span> assignments<br><span class="hljs-keyword">WHERE</span> Condition<br></code></pre></td></tr></table></figure><p>例子： John moves to Coogee. <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">UPDATE</span> Drinkers<br><span class="hljs-keyword">SET</span> addr=<span class="hljs-string">&#x27;Coogee&#x27;</span>, phone=<span class="hljs-string">&#x27;9665-4321&#x27;</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;John&#x27;</span><br></code></pre></td></tr></table></figure></p><p>也可以批量更新tuples 例子： Increase all beer prices by 10%<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">UPDATE</span> Sells<br><span class="hljs-keyword">SET</span> price=price*<span class="hljs-number">1.10</span><br></code></pre></td></tr></table></figure></p><h2 id="view">VIEW</h2><p>VIEW是虚拟的关系，不占DBMS里的空间 创建VIEW： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> View_name <span class="hljs-keyword">AS</span> Query<br></code></pre></td></tr></table></figure>删除VIEW： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> View_name<br></code></pre></td></tr></table></figure></p><p>例子： Using the InnerCityHotels view <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> InnerCityHotels <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span>, license<br><span class="hljs-keyword">FROM</span> Bars<br><span class="hljs-keyword">WHERE</span> addr <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;The Rocks&#x27;</span>,<span class="hljs-string">&#x27;Sydney&#x27;</span>)<br><br><span class="hljs-keyword">SELECT</span> pub<br><span class="hljs-keyword">FROM</span> InnerCityHotels<br><span class="hljs-keyword">WHERE</span> lic=<span class="hljs-string">&#x27;123456&#x27;</span><br></code></pre></td></tr></table></figure></p><ul><li>VIEW是自动更新数据的，如果原始的表数据更新了的话</li></ul><h2 id="创建索引">创建索引</h2><h3 id="create-index">CREATE INDEX</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_name<br><span class="hljs-keyword">ON</span> <span class="hljs-built_in">table_name</span> (column1, column2, ...)<br></code></pre></td></tr></table></figure><p>或者 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> index_name<br><span class="hljs-keyword">ON</span> <span class="hljs-built_in">table_name</span> (column1, column2, ...)<br></code></pre></td></tr></table></figure></p><h1 id="plpgsql">PLpgSQL</h1><h2 id="自定义data-types">自定义Data Types</h2><h3 id="create-domain">CREATE DOMAIN</h3><p>用来创建basic types <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PostgreSQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DOMAIN</span> DomainName [<span class="hljs-keyword">AS</span>] DataType<br>[<span class="hljs-keyword">DEFAULT</span> expression]<br>[&#123;<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> | <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">CHECK</span> (expression)&#125;]<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DOMAIN</span> UnswCourseCode <span class="hljs-keyword">AS</span> <span class="hljs-type">TEXT</span><br><span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">value</span> ~ <span class="hljs-string">&#x27;[A-Z]&#123;4&#125;[0-9]&#123;4&#125;&#x27;</span>)<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Course(<br>id <span class="hljs-type">INTEGER</span>,<br>code UnswCourseCode,<br>...<br>)<br></code></pre></td></tr></table></figure></p><h3 id="create-type">CREATE TYPE</h3><p>用来创建复合类型tuple types <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> TypeName <span class="hljs-keyword">AS</span> <br>(AttrName <span class="hljs-number">1</span> DataType1, AttrName2 DataType2, ...)<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> ComplexNumber <span class="hljs-keyword">AS</span> (r <span class="hljs-type">FLOAT</span>, i <span class="hljs-type">FLOAT</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> CourseInfo <span class="hljs-keyword">AS</span> (<br>course UnswCourseCode,<br>syllabus <span class="hljs-type">TEXT</span>,<br>lecturer <span class="hljs-type">TEXT</span><br>);<br></code></pre></td></tr></table></figure></p><ul><li>可以用自定义的basic type</li><li>如果有约束，放在DOMAIN里 <strong><em>：还不知道CREATETYPE里能不能加约束</em></strong></li></ul><p>另一个例子（将复杂的JSON对象转为SQL行）： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> address <span class="hljs-keyword">as</span> (country <span class="hljs-type">TEXT</span>, city <span class="hljs-type">TEXT</span>);<br><br><span class="hljs-keyword">SELECT</span><br>  *<br><span class="hljs-keyword">FROM</span><br>  json_to_record(<br>    <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;address&quot;: &#123;&quot;country&quot;: &quot;CN&quot;, &quot;city&quot;: &quot;BeiJing&quot;&#125;&#125;&#x27;</span><br>  ) <span class="hljs-keyword">AS</span> x(<span class="hljs-type">name</span> <span class="hljs-type">TEXT</span>, age <span class="hljs-type">INT</span>, address address);<br></code></pre></td></tr></table></figure> -先创建一个自定义的address类型，包括country和city两个text类型字段。</p><p>结果： <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section"> name | age |   address</span><br><span class="hljs-section">------+-----+--------------</span><br><span class="hljs-code"> Tom  |  20 | (CN,BeiJing)</span><br>(1 row)<br></code></pre></td></tr></table></figure></p><p>也可以用来创建枚举类型 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">AS ENUM</span>(<br>label_1<br>[, label_2, ...]<br>);<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> my_color <span class="hljs-keyword">AS ENUM</span> (<br>    <span class="hljs-string">&#x27;yellow&#x27;</span>,<br>    <span class="hljs-string">&#x27;red&#x27;</span>,<br>    <span class="hljs-string">&#x27;blue&#x27;</span>,<br>    <span class="hljs-string">&#x27;green&#x27;</span>,<br>    <span class="hljs-string">&#x27;white&#x27;</span>,<br>    <span class="hljs-string">&#x27;black&#x27;</span><br>);<br><br><span class="hljs-keyword">SELECT</span> enum_first(<span class="hljs-keyword">null</span>:: my_color);<br><span class="hljs-keyword">SELECT</span> enum_last(<span class="hljs-keyword">null</span>:: my_color);<br></code></pre></td></tr></table></figure></p><ul><li>用enum_first()和enum_last()函数返回第一个和最后一个枚举值。<ul><li>（函数说明：必须要传入一个数据，所以用null:: my_color；用'yellow'::my_color其实也行，结果一样）</li></ul></li></ul><p>CREATE TYPE和CREATE TABLE不一样 -不创建新的空白表，只是定义一种数据类型 - 没有键的约束 -没有明确特定的域约束</p><h2 id="exception">EXCEPTION</h2><p>用来设定例外条件 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">BEGIN</span><br>Statements ...<br><span class="hljs-keyword">EXCEPTION</span><br><span class="hljs-keyword">WHEN</span> Exception1 <span class="hljs-keyword">THEN</span><br>StatementsForHandler1<br><span class="hljs-keyword">WHEN</span> Exception2 <span class="hljs-keyword">THEN</span><br>StatementsForHandler2<br>...<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure></p><ul><li>Exception的内容可以是（预设的？）一长串<ul><li>如：division_by_zero OR floating_point_exception OR ...</li></ul></li></ul><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">-- table T contains one tuple (&#x27;Tom&#x27;, &#x27;Jones&#x27;)</span><br><span class="hljs-keyword">DECLARE</span><br>x <span class="hljs-type">INTEGER</span> := <span class="hljs-number">3</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">UPDATE</span> T <span class="hljs-keyword">SET</span> firstname = <span class="hljs-string">&#x27;Joe&#x27;</span> <span class="hljs-keyword">WHERE</span> lastname = <span class="hljs-string">&#x27;Jones&#x27;</span>;<br><span class="hljs-comment">-- table T now contains (&#x27;Joe&#x27;, &#x27;Jones&#x27;)</span><br>x := x + <span class="hljs-number">1</span>;<br>y := x / <span class="hljs-number">0</span>;<br><span class="hljs-keyword">EXCEPTION</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-built_in">division_by_zero</span> <span class="hljs-keyword">THEN</span><br><span class="hljs-comment">-- update on T is rolled back to (&#x27;Tom&#x27;, &#x27;Jones&#x27;)</span><br><span class="hljs-keyword">RAISE</span> <span class="hljs-keyword">NOTICE</span> <span class="hljs-string">&#x27;Caught division_by_zero&#x27;</span>;<br><span class="hljs-keyword">RETURN</span> x;<br><span class="hljs-comment">-- value returned is 4</span><br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure></p><h4 id="raise">RAISE</h4><p>用来生成log信息</p><p>例如 - <code>RAISE DEBUG 'Simple message';</code> -<code>RAISE NOTICE 'User = %', user_id;</code>（也可当作print用） -<code>RAISE EXCEPTION 'Fatal: value was %', value;</code></p><p>RAISE后面可以跟的东西的等级： - DEBUG - LOG - INFO - NOTICE - WARNING- EXCEPTION</p><h2 id="游标cursors">游标Cursors</h2><p>可以用游标保存、修改（整行）变量。游标也可以作为函数的返回值。一般用于大结果集，内存放不下，用游标一条一条处理。</p><p>使用顺序： - 声明游标 - 打开游标 - 使用游标 - 关闭游标</p><p>例子：一般使用以下get_film_titles(integer)函数接受代表电影发行年份的参数。在函数内部，我们查询所有发行年份等于传递给该函数的发行年份的电影。我们使用光标在各行之间循环，并连接标题和标题包含ful单词的电影发行年份。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> get_film_titles(p_year <span class="hljs-type">INTEGER</span>)<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">text</span> <span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">-- 声明游标</span></span><br><span class="language-pgsql"><span class="hljs-keyword">DECLARE</span> </span><br><span class="language-pgsql">titles <span class="hljs-type">TEXT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-pgsql">rec_film <span class="hljs-type">RECORD</span>;</span><br><span class="language-pgsql">cur_films <span class="hljs-keyword">CURSOR</span>(p_year <span class="hljs-type">INTEGER</span>) <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> film <span class="hljs-keyword">WHERE</span> release_year = p_year;</span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql"><span class="hljs-comment">-- 打开游标</span></span><br><span class="language-pgsql"><span class="hljs-keyword">OPEN</span> cur_films(p_year);</span><br><span class="language-pgsql"><span class="hljs-keyword">LOOP</span></span><br><span class="language-pgsql">    <span class="hljs-comment">-- 获取记录放入film</span></span><br><span class="language-pgsql">    <span class="hljs-keyword">FETCH</span> cur_films <span class="hljs-keyword">INTO</span> rec_film;</span><br><span class="language-pgsql">    <span class="hljs-comment">-- exit when no more row to fetch</span></span><br><span class="language-pgsql">    <span class="hljs-keyword">EXIT</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-built_in">FOUND</span>;</span><br><span class="language-pgsql">    <span class="hljs-comment">-- 构建输出</span></span><br><span class="language-pgsql">    <span class="hljs-keyword">IF</span> rec_film.title <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%ful%&#x27;</span> </span><br><span class="language-pgsql">    <span class="hljs-keyword">THEN</span> titles := titles || <span class="hljs-string">&#x27;,&#x27;</span> || rec_film.title || <span class="hljs-string">&#x27;:&#x27;</span> || rec_film.release_year;</span><br><span class="language-pgsql">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;</span><br><span class="language-pgsql"><span class="hljs-comment">-- 关闭游标</span></span><br><span class="language-pgsql"><span class="hljs-keyword">CLOSE</span> cur_films;</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURN</span> titles;</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span>; </span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br><br><span class="hljs-keyword">SELECT</span> get_film_titles(<span class="hljs-number">2006</span>);<br><br><span class="hljs-comment">--返回结果 ,Grosse Wonderful:2006,Day Unfaithful:2006,Reap Unfaithful:2006,Unfaithful Kill:2006,Wonderful Drop:2006</span><br></code></pre></td></tr></table></figure><p>例子：游标作为返回值返回给外层调用者，调用者可使用fetch语句获取游标内容。<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> tf4(<span class="hljs-type">refcursor</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">refcursor</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">BEGIN</span><br><span class="hljs-string">OPEN $1 FOR SELECT c4 FROM tf1;</span><br><span class="hljs-string">RETURN $1;</span><br><span class="hljs-string">END; </span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br><br><span class="hljs-keyword">BEGIN</span>; <br><span class="hljs-keyword">SELECT</span> tf4(<span class="hljs-string">&#x27;funccursor&#x27;</span>);<br><br><span class="hljs-keyword">FETCH</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">IN</span> funccursor;<br><span class="hljs-comment">--  c4 </span><br><span class="hljs-comment">-- ---------- </span><br><span class="hljs-comment">-- Dalian </span><br><span class="hljs-comment">-- Tokio </span><br><span class="hljs-comment">-- Xian </span><br><span class="hljs-comment">-- Changsha </span><br><span class="hljs-comment">-- New York </span><br><br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure></p><h3 id="声明游标">声明游标</h3><h4 id="record">RECORD</h4><p>用RECORD（或者Table%ROWTYPE）创建（FOR循环用）游标，最普通</p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> totalSalary() <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">REAL</span> <span class="hljs-keyword">AS</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">DECLARE</span></span><br><span class="language-pgsql">employee <span class="hljs-type">RECORD</span>;</span><br><span class="language-pgsql">totalSalary <span class="hljs-type">REAL</span>:=<span class="hljs-number">0</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql"><span class="hljs-keyword">FOR</span> employee <span class="hljs-keyword">IN</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Employees</span><br><span class="language-pgsql"><span class="hljs-keyword">LOOP</span></span><br><span class="language-pgsql">totalSalary:= totalSalary + employee.salary;</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURN</span> totalSalary;</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span>;</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br></code></pre></td></tr></table></figure></p><h4 id="cursor-for绑定sqlquery">CURSOR FOR（绑定SQL/query）</h4><p><code>&lt;cursor_name_a&gt; CURSOR [name datatype, name datatype, ...] FOR &lt;query_b&gt;;</code></p><ul><li>CURSOR和FOR之间可以声明游标使用的参数。</li></ul><h4 id="refcursor-未绑定query">REFCURSOR （未绑定query）</h4><p><code>&lt;cursor_name_c&gt; REFCURSOR;</code></p><ul><li>未绑定query的游标可以在不同query之间用</li></ul><h3 id="打开游标">打开游标</h3><h4 id="open">OPEN</h4><p>打开绑定的游标 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">OPEN</span> cur_films(year:=<span class="hljs-number">2005</span>);<br></code></pre></td></tr></table></figure></p><p>打开未绑定的游标 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">OPEN</span> my_cursor <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> city <span class="hljs-keyword">WHERE</span> counter = p_country;<br></code></pre></td></tr></table></figure></p><p>PostgreSQL中打开游标并绑定到动态查询（有点像python的exec？）<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">OPEN</span> unbound_cursor_vaariable [ [<span class="hljs-keyword">NO</span>] SCROLL ]<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EXECUTE</span> query_string [<span class="hljs-keyword">USING</span> expression [,...]];<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">query := <span class="hljs-string">&#x27;SELECT * FROM city ORDER BY $1&#x27;</span><br><span class="hljs-keyword">OPEN</span> cur_city <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EXECUTE</span> query <span class="hljs-keyword">USING</span> sort_field;<br></code></pre></td></tr></table></figure></p><ul><li>在这个例子中，我们构建一个动态查询，根据一个sort_field（好像就是$1）参数对行进行排序（orderby），并打开执行该动态查询的游标。</li></ul><h3 id="使用游标">使用游标</h3><h4 id="fetch">FETCH</h4><p>获取下一行 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">FETCH</span> [ direction &#123; <span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span> &#125; ] cursor_variable <span class="hljs-keyword">INTO</span> target_variable;<br></code></pre></td></tr></table></figure></p><ul><li>该FETCH语句从游标中获取下一行，并为其分配一个target_variable，它可以是记录，行变量或逗号分隔的变量列表。如果找不到更多行，则将target_variable其设置为NULL（s）</li><li>如果不显示指定方向，方向缺省为NEXT。可以为：<ul><li>NEXT</li><li>LAST</li><li>PRIOR</li><li>FIRST</li><li>ABSOLUTE count</li><li>RELATIVE count</li><li>FORWARD（只适用于SCROLL option声明的游标）</li><li>BACKWARD（只适用于SCROLL option声明的游标）</li></ul></li></ul><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">FETCH</span> cur_films <span class="hljs-keyword">INTO</span> row_film;<br><span class="hljs-keyword">FETCH LAST</span> <span class="hljs-keyword">FROM</span> row_film <span class="hljs-keyword">INTO</span> title, release_year;<br></code></pre></td></tr></table></figure></p><h4 id="move">MOVE</h4><p>移动游标 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">MOVE</span> [ direction &#123; <span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span> &#125; ] cursor_variable;<br></code></pre></td></tr></table></figure> -如果只想移动游标而不检索任何行，就用MOVE，方向和FETCH一样。</p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">MOVE</span> cur_films2;<br><span class="hljs-keyword">MOVE LAST</span> <span class="hljs-keyword">FROM</span> cur_films;<br><span class="hljs-keyword">MOVE RELATIVE</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">FROM</span> cur_films;<br><span class="hljs-keyword">MOVE FORWARD</span> <span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> cur_films;<br></code></pre></td></tr></table></figure></p><h4 id="deleteupdate">DELETE/UPDATE</h4><p>删除或更新 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">SET</span> column = <span class="hljs-keyword">value</span>,...<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">CURRENT</span> <span class="hljs-keyword">OF</span> cursor_variable;<br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">CURRENT</span> <span class="hljs-keyword">OF</span> cursor_variable;<br></code></pre></td></tr></table></figure></p><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">UPDATE</span> film <span class="hljs-keyword">SET</span> release_year=p_year<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">CURRENT</span> <span class="hljs-keyword">OF</span> cur_films;<br></code></pre></td></tr></table></figure></p><h3 id="关闭游标">关闭游标</h3><p>关闭游标，释放资源或释放游标变量 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CLOSE</span> cursor_variable<br></code></pre></td></tr></table></figure></p><h2 id="触发器triggers">触发器Triggers</h2><h3 id="trigger">TRIGGER</h3><p>触发器，在指定的数据库事件发生时自动执行/调用 <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> TriggerName<br>[<span class="hljs-keyword">AFTER</span> | <span class="hljs-keyword">BEFORE</span> | <span class="hljs-keyword">INSTEAD</span> <span class="hljs-keyword">OF</span>] Event1 [<span class="hljs-keyword">OR</span> Event2 ...]<br><span class="hljs-keyword">ON</span> TableName<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span>/<span class="hljs-keyword">STATEMENT</span><br><span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">PROCEDURE</span> FunctionName(args...);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> function_name() <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">TRIGGER</span><br>...<br></code></pre></td></tr></table></figure></p><h3 id="trigger作为函数返回值">Trigger作为函数返回值</h3><table><thead><tr class="header"><th>Trigger</th><th>NEW</th><th>OLD</th></tr></thead><tbody><tr class="odd"><td>Insert</td><td>Yes</td><td>No</td></tr><tr class="even"><td>Update</td><td>Yes</td><td>Yes</td></tr><tr class="odd"><td>Delete</td><td>No</td><td>Yes</td></tr></tbody></table><p>例子： <figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">Create</span> <span class="hljs-keyword">Function</span> checkState() <span class="hljs-keyword">returns</span> <span class="hljs-type">trigger</span> <span class="hljs-keyword">as</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">begin</span></span><br><span class="language-pgsql">  <span class="hljs-comment">-- normalise the user-supplied value</span></span><br><span class="language-pgsql">  <span class="hljs-built_in">new</span>.state = upper(trim(<span class="hljs-built_in">new</span>.state));</span><br><span class="language-pgsql">  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">new</span>.state !~ <span class="hljs-string">&#x27;^[A-Z][A-Z]$&#x27;</span>) <span class="hljs-keyword">then</span></span><br><span class="language-pgsql">  <span class="hljs-keyword">raise</span> <span class="hljs-keyword">exception</span> <span class="hljs-string">&#x27;Code Must Be Two Alpha Chars&#x27;</span>;</span><br><span class="language-pgsql">  <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql">  <span class="hljs-comment">-- implement referential integrity check</span></span><br><span class="language-pgsql">  <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> States <span class="hljs-keyword">where</span> code=<span class="hljs-built_in">new</span>.state;</span><br><span class="language-pgsql">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span>) <span class="hljs-keyword">then</span></span><br><span class="language-pgsql">  <span class="hljs-keyword">raise</span> <span class="hljs-keyword">exception</span> <span class="hljs-string">&#x27;Invalid State Code %&#x27;</span>,<span class="hljs-built_in">new</span>.state;</span><br><span class="language-pgsql">  <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span>;  $$</span> <span class="hljs-keyword">language</span> plpgsql;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>2023F</category>
      
    </categories>
    
    
    <tags>
      
      <tag>专题整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绿格碎片</title>
    <link href="/2023/07/03/%E7%BB%BF%E6%A0%BC%E7%A2%8E%E7%89%87/"/>
    <url>/2023/07/03/%E7%BB%BF%E6%A0%BC%E7%A2%8E%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h2 id="食来自对食相当不敏感的人的总结">食（来自对食相当不敏感的人的总结</h2><h3 id="基地内感谢后勤">基地内（感谢后勤</h3><p>卤肉饭 番茄土豆牛肉 黄焖羊肉 一次比一次辣的凉拌黄瓜冬瓜虾皮（有点黑暗料理 土豆片炒生姜片（还好不是丝）非传统粽子（油饼食不食 大肉面片作为主食的凉拌土豆丝（土豆主食说：米饭是淀粉，土豆也是淀粉，所以土豆可以代替米饭人生第一次吃冰粉（好吃） 冰西瓜、桃子yyds 西凉姜饮（怪好喝的——字面意思</p><h3 id="基地外感谢曾叔">基地外（感谢曾叔</h3><p>传统牛肉面 番茄牛肉片拌面（最好吃的一顿</p><h2 id="事可能指的是之前从未做过的事">事（可能指的是之前从未做过的事？</h2><h3 id="做了">做了</h3><p>从绿皮火车第一节车厢走到最后一节进沙漠的时候看到战斗机训练（这是可以说的吗（后面就没看到过了在沙丘顶上爽吹最狂烈的风（喜欢风看银河、星星和流星（寻真理于星辰，孑然亦复如是掌握三种种梭梭苗的方法（曾叔微操法、石叔大巧不工法、金华狂暴挖土法）第一天手掌就成了战损版，直到最后一天 浇水（我们一般称之为“驯服野生水管”浅捡牛粪，狂暴扫地 咀嚼空气中的沙子，品尝饮水中的无机盐作为第一组洗碗，创立了2h洗碗记录（最短记录于次日被打破（45min），最长记录于x天后被打破（2.5h））学习投掷飞盘，打乒乓球“杀意感知”=爽玩狼人杀（猎人第一晚被刀盲狙小狼；女巫暴跳预言家胡言乱语）与三国杀（当主公手刃忠臣，当忠臣手刃忠臣；冠军皮肤忠马岱：一穿三反）沙地足球赛（10v10公平竞技 乘坐不同载具（军用卡车、皮卡车、曾叔的丰田霸道装人影办的保险柜，看到气象导弹 赶牛，沙漠徒步1km 绕着基地飙车，修围栏抬发电机，学习各种发电机的启动方法 研究基地的电带动男生洗澡时引吭高歌，学会了一些从没听过的歌（点名表扬《天外来物》、《嘉宾》）12男挤在蒙古包睡觉解锁绿格隐藏成就：睡沙丘上（我解锁两次.jpg（太喜欢了，以后有条件必如此（定制化沙床，睁眼满目星空发现仙人掌、壁虎、蜻蜓等神奇生物各方面免疫蜜蜂（视觉、听觉、味觉）（黄色防晒衣=招蜂引虫 见证沙漠下暴雨看到美丽朝霞与晚霞，追逐朝阳与夕阳 调频FM 接受化妆与护理方面的建议变声期后第一次当着许多人面正式唱歌（内心感触<strong>巨深</strong>结识新朋友 克己</p><h3 id="没做">没做（</h3><p>滑沙（呜呜呜 生火与做饭（基本没进厨房（逃吃羊肉火锅（开嬴趴不叫我.jpg 和每一位成员合影（xm迪彬拍摄大量关于自己的照片（纪蓝jj是天使 乘坐摩托车与ATV给曾叔留下一段话（好忙好忙TAT 抒情（是不想吗 喝酒（坚决不</p><h2 id="人">人</h2><h3 id="非团员们">非团员们</h3><h4 id="软卧的老爷爷">软卧的老爷爷</h4><h4 id="硬卧的造飞机的夫妇">硬卧的造飞机的夫妇</h4><h4 id="民勤汽修厂的叔叔">民勤汽修厂的叔叔</h4><h4 id="曾叔">曾叔</h4><h4 id="杨叔">杨叔</h4><h4 id="大石叔">大石叔</h4><h4 id="小石叔">小石叔</h4><h4 id="记者">记者</h4><h3 id="团员们">团员们</h3><h4 id="cjy">cjy</h4><h4 id="cyq">cyq</h4><h4 id="cqr">cqr</h4><h4 id="cym">cym</h4><h4 id="dxw">dxw</h4><h4 id="djq">djq</h4><h4 id="fyt">fyt</h4><h4 id="hyx">hyx</h4><h4 id="hyx-1">hyx</h4><h4 id="hdb">hdb</h4><h4 id="hyh">hyh</h4><h4 id="jhz">jhz</h4><h4 id="lyx">lyx</h4><h4 id="lh">lh</h4><h4 id="lzh">lzh</h4><h4 id="lqy">lqy</h4><h4 id="ljh">ljh</h4><h4 id="ld">ld</h4><h4 id="lll">lll</h4><h4 id="lsm">lsm</h4><h4 id="lyn">lyn</h4><h4 id="lzy">lzy</h4><h4 id="phh">phh</h4><h4 id="prt">prt</h4><h4 id="smj">smj</h4><h4 id="sr">sr</h4><h4 id="ssl">ssl</h4><h4 id="sjm">sjm</h4><h4 id="wtx">wtx</h4><h4 id="wyx">wyx</h4><h4 id="wle">wle</h4><h4 id="wrx">wrx</h4><h4 id="wxz">wxz</h4><h4 id="wjl">wjl</h4><h4 id="wn">wn</h4><h4 id="xzh">xzh</h4><h4 id="xza">xza</h4><h4 id="yxj">yxj</h4><h4 id="yss">yss</h4><h4 id="yjj">yjj</h4><h4 id="yj">yj</h4><h4 id="zhj">zhj</h4><h4 id="zkj">zkj</h4><h4 id="zl">zl</h4><h4 id="zlh">zlh</h4><h4 id="zyy">zyy</h4><h4 id="zyh">zyh</h4><h4 id="zzc">zzc</h4>]]></content>
    
    
    <categories>
      
      <category>2023暑假绿格</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绿格Day0呓语</title>
    <link href="/2023/06/20/%E7%BB%BF%E6%A0%BCDay0%E5%91%93%E8%AF%AD/"/>
    <url>/2023/06/20/%E7%BB%BF%E6%A0%BCDay0%E5%91%93%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d075e7787d789739ed65b78085fa6f5a78975585f26265f11261b930e4217609"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>2023暑假绿格</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mind-streaming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.03.14 生病了</title>
    <link href="/2023/03/14/%E7%94%9F%E7%97%85%E4%BA%86/"/>
    <url>/2023/03/14/%E7%94%9F%E7%97%85%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>甲流有点难受啊……</p><span id="more"></span><p>记录一下全流程： 1. 嗓子哑 2. 头疼 3. 鼻塞 4. 流鼻涕，打喷嚏 5.嗓子痒，狂咳不止 6. 有时咳嗽 7. 嗅觉丧失</p><p>2周后更新：似乎是新冠？因为我的嗅觉似乎丧失了。但是我又似乎没有发烧，也没吃任何药，硬扛扛下来了这一波病毒。只能说人定胜天，然后疫苗应该起到了不少作用。</p><p>3周后更新： 嗅觉恢复了，芜湖~</p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最后一名 | 马塞尔·埃梅</title>
    <link href="/2023/02/28/%E6%9C%80%E5%90%8E%E4%B8%80%E5%90%8D/"/>
    <url>/2023/02/28/%E6%9C%80%E5%90%8E%E4%B8%80%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>这篇文章是我两年前看到的，非常喜欢，没有理由，或者说理由不详。</p><span id="more"></span><p>从前，有一名自行车运动员，名叫马尔丹，他每次参加比赛，总是最后一名到达，被其他运动员远远甩在后面，受到观众纷纷的嘲笑。他身穿一件浅蓝色运动衫，左胸前绣着一小朵长春花。只见他伏在车把上，牙齿紧紧咬住手帕，使劲蹬车的神气，不亚于第一名。在最艰难的爬坡中，他的情绪无比高涨，眼睛射出炽热的光芒。看到他那闪亮的眼神、奋力鼓起来的肌肉，人人都说：</p><p>“嘿！瞧马尔丹的样子，看来他的竞技状态蛮高嘛。好极啦，他这次到达图尔城（或者波尔多城、奥尔良城、敦刻尔克城），准能名列前茅。”</p><p>然而，这次同从前一样，马尔丹还是最后一名。他一直希望能够得个好名次。他手头确实有点拮据，家里有妻子儿女要养活，而最后一名的收入是不多的。尽管他生活不顺心，可是从来没有人听到他抱怨过命运不公道。他到达图尔的时候（或者马赛、瑟堡），看热闹的人都哈哈大笑，奚落他说：</p><p>“喂！马尔丹！你是倒数第一名呀！”</p><p>马尔丹听到这样的玩笑后，从来不发脾气；他若是向人群瞥一眼，也总是含着淡淡的微笑，好像对人们说：”对，是我，马尔丹，我是最后一名，下一次会赶上去的。“车赛结束之后，他的比赛伙伴问他：</p><p>“怎么样，你对结果满意吗？这次挺顺利吧？”</p><p>“哦，还不错！”马尔丹回答说，“还算满意吧。”</p><p>他没听出来别人是在嘲笑他，也跟着别人笑。看着别人在朋友们的簇拥下，在一片恭贺声中走开，他甚至没有一点嫉妒的念头。最后，只剩下他孤零零一个人，因为，从来没有任何人在终点接他。他的妻子儿女住在乡下，村子位于巴黎通往奥尔良的公路旁。他赛车路过那里时，一闪而过，只能远远地望一望亲人。凡是有理想的人，生活自然与众不同，这是可以理解的。马尔丹爱他的妻子，也爱他的孩子们。然而，他是自行车运动员，比赛时中途不能停下来。他赚到点钱，就给家里寄去；他也经常想家，不过，比赛时不想（他正忙着呢），而是到了晚上中途休息、在他按摩长途蹬车疲惫的双腿时才思念家人。</p><p>睡觉之前，马尔丹总是做祷告，向天主汇报他一天的赛程，根本不想会不会惹烦了天主。他以为天主会关心自行车比赛，按说这种想法也对头。天主如果不熟稔各行各业，就不可能理解要具有一颗坦荡的心灵有多难。</p><p>“天主啊，”马尔丹祷告说，“还是讲讲今天的车赛吧。不知道是什么原因，结果总是老样子。说起来，我这辆车很好，是挑不出毛病来的。有一天，我心里琢磨，会不会脚蹬子里掉进了什么东西。于是，我不慌不忙，就像我同您聊天这样，把车子一件一件拆开，结果一看，脚蹬子里没有一粒砂子，别的机件也一样。谁若是来对我说这辆车不好，我会回答说是好车，是名牌的。既然车没问题，那又是怎么回事呢？当然啦，人与人不同：体力、意志、智慧都不能相比。至于人嘛，天主啊，这正是您管的事情。我就是这样想的，因此毫无怨言。我非常清楚，在比赛中，总得有人是最后一名，这没有什么见不得人的。不，我不是发牢骚，不过说说而已。”</p><p>祷告完了，他合上眼睛，一觉睡到大天亮，没有做一个梦，醒来喜笑颜开，说道：“今天，我可要头一个到达。”</p><p>他想象自己荣获第一的情景：一名少女跑来向他献花，他把赢得的钱寄给妻子，想到得意处，便美滋滋地笑起来。他还仿佛看到报纸的报道：“在波利尼—斯特拉斯堡的分程赛中，马尔丹夺魁；经过反复争夺，他在这次短距离比赛中获胜。”他想第一想得入了迷，连名列第二或者再后几名，都会感到难受，更不用说最后一名了。而其实呢，他已经不知不觉爱上了这最后的名次。</p><p>晚上到达斯特拉斯堡时，马尔丹还是往常的名次，观众哗然，纷纷嘲笑他。他有点莫名其妙，可是到了第二天，他进入下一程比赛时，照样充满必胜的信心。每天早晨，每次比赛出发时，这种伟大的奇迹都要在他充满希望的头脑中重演一遍。巴黎到马赛的自行车比赛的前一天，在首都的赛手中间盛传，马尔丹要一鸣惊人，五十三名记者马上跑去采访他。</p><p>“问我对戏剧的看法吗？”马尔丹答道。“记得有一天，我经过卡尔松，偶然去市剧院观看《浮士德》演出，真替玛格丽特难过。我要说，倘使浮士德懂得一辆好自行车的意义，他就不会贻误青春，也不会起邪念，糟蹋了那个姑娘，那个姑娘也就肯定能找到丈夫了。这就是我的看法。你们现在问我，第一个到达马赛的将是谁。我可以直言不讳地告诉你们，这场车赛夺魁的将是我。”</p><p>记者散去之后，马尔丹收到一封香气扑鼻的书信，是一个叫莉莉雅娜寄来的，信中邀请他去喝茶。莉莉雅娜是个放荡的女人，道德败坏，生活堕落，这类女人多得成灾。马尔丹先去赛车场，骑几圈试试车。出了赛车场，他直奔莉莉雅娜的住所，一点戒心也没有。他只拎一只小手提箱，里边装着他的运动服。</p><p>他向莉莉雅娜介绍自行车赛的情况，比赛中采取什么策略最高，如何保养自行车和自己的身体。这个荡妇故意提出些问题来挑逗他：</p><p>“马尔丹先生，怎么样按摩呢？”</p><p>说着，她把腿伸过去。马尔丹坦然地抓住这个堕落女人的腿，一点儿也没有动心，就像抓住一名运动员的腿似的，平静地解释说：</p><p>“就这样按摩，慢慢往上推。给女人按摩可不容易，对不对，因为她们的肌肉太松软。”</p><p>“如果发生车祸受了伤，您怎么抱我呢？”</p><p>她还提了一些别的问题；不过，那个女人说的话，不便全在这里重复。马尔丹老老实实地一一回答，丝毫没有觉察出她居心不良。她很想知道手提箱里装的是什么，马尔丹毫不迟疑，把自己的运动衫、运动裤、运动鞋拿出来给她看。</p><p>“哦！马尔丹先生，”莉莉雅娜说，“我真想看看您穿上运动衣是什么样子，我从来没有近看过。”</p><p>“既然您有这个兴趣，”马尔丹回答说，“我很乐意穿给您看。对不起，我到隔壁房间去一下。”</p><p>等他回来一瞧，发现莉莉雅娜穿得比他还要少，那情景就不便描述了。然而，马尔丹连头也没有低一低，他严肃地瞅着无耻的女人，频频点头说道：</p><p>“看得出来，您也想当自行车运动员。这事儿，我可要坦率地同您谈谈。依我看呀，自行车运动不适合女人。要论腿力，您可能会赶上我，这一点我并不怀疑。但是，女人有乳房，骑车跑二三百公里，这是非常沉重的负担，太太。还没有把孩子的问题打上呢，这也是一条原因。”</p><p>这番话又明智，又天真，莉莉雅娜听了深受感动，她终于明白美德有多么可爱。她一生罪孽很多，这是幡然悔悟，开始憎恨自己，流着甜蜜的眼泪说：</p><p>“我真是个疯女人，不过，从现在开始，我绝不再干了。”</p><p>“其实也没什么不好，”马尔丹说。“您现在看到了我穿运动服的样子；我再回避一下，到隔壁去穿好衣裳。您趁这工夫也把衣裳穿好，以后就不会再想当运动员了。”</p><p>两人各自穿好衣裳。多亏了马尔丹，可怜的女人恢复了名誉和对生活的乐趣，从此于心无愧了。马尔丹也带着她的祝福离开了。各家晚报登出了马尔丹的照片，他既不兴奋，也不骄傲，他用不着这种鼓噪就信心十足。次日一早从巴黎出发，马尔丹就落到最后，并且一直保持到底。他进阿尔勒城的时候，听说他的对手们已经到达终点马赛，但是，他仍然全力以赴。对其他赛手来说，比赛尽管已经结束，可是马尔丹心里并不气馁，还希望名列第一。各报记者这才明白上了当，非常恼火，都骂他是牛皮大王，建议他去参加“同龄驴子赛”（这是文字游戏，不看体育报的人是不懂的），马尔丹对此毫不介意，依然信心十足。而且，莉莉雅娜也弃旧图新，在忠诚街开了一个乳品店，字号为“好车店”，卖的鸡蛋比各处都便宜一个苏。</p><p>随着年龄与经验的增长，马尔丹竞争的劲头也越来越大，他参加赛车的次数跟日历中的圣徒节一样多。他不知休息，一场自行车赛刚刚结束，又立刻报名参加另外一场。他的两鬓渐白，背也驼了，成了自行车运动这行的元老。但是，他并没有意识到这种变化，甚至连自己的年龄也好像忘记了。他还同过去一样，总是最后一个到达，可是眼睛却比从前瞪大了两三倍。他在祷告时说：</p><p>“天主啊，我不明白，我真不知道这是怎么回事……”</p><p>夏季有一天，他参加巴黎到奥尔良的自行车赛，正使劲爬一个他熟悉的山坡，忽然发现车带是瘪的。他到路边换车带的工夫，有两个妇女走过来，其中一个怀抱着刚生下几个月的小孩，向他打听说：</p><p>“请问，有一个叫马尔丹的自行车运动员，您认识吗？”他心不在焉地答道：</p><p>“我就是马尔丹，最后一名就是我。下一次比赛会赶上去的。”</p><p>“我是你的妻子，马尔丹。”</p><p>他抬起头，可是手还在不停地校正车带，一边充满感情地说：</p><p>“我真高兴……看来孩子们也见大了。”他看了看妻子怀里的婴儿，以为是他的孩子，就补充了这么一句。</p><p>他妻子有点尴尬，赶紧指了指一同来的年轻妇女说：</p><p>“马尔丹，她是你的女儿，个头儿长得赶上你了，她已经结婚了；你的几个儿子也都成了家……”</p><p>“我真高兴，没想到孩子们都长这么大了，时间过得可真快……你怀里抱的，是我的外孙吗……”</p><p>年轻妇女扭过头去，还是她的母亲回答说：</p><p>“不是，马尔丹，这不是她的儿子。是我的……我看你一直不回来……”</p><p>马尔丹一句话没讲，又接着安装他的车带，然后开始打气。他直起腰来的时候，看到妻子簌簌流泪，便喃喃地说：</p><p>“干自行车运动员这行，你知道是怎么回事，由不得自己呀……我经常想念你，当然啦，这跟在你的身边还不一样……”孩子哇哇哭起来，怎么哄好像也哄不好。马尔丹一时慌了神儿，只好拿起打气筒，对着孩子的鼻孔打气，一边还娇声娇气地说：</p><p>“你，你，你……”</p><p>婴儿破涕为笑。马尔丹亲了亲孩子，同家人告别。</p><p>“我耽误了五分钟，但是我并不后悔，何况我不用费劲就能赶上去。这次比赛，第一我稳拿了。”</p><p>他蹬车继续爬坡，两个女人目送他很长时间。只见他站立在车蹬上，身体的重量忽而偏向左边，忽而偏向右边。</p><p>“瞧他多吃力，”他妻子低声说。“从前，他爬什么山坡，只需用腿蹬车就能上去，身子根本不用离座位，那时到现在才不过十五年。”</p><p>马尔丹快到坡顶时，速度越来越慢，看上去好像要随时停下来。车子终于升到地平线，他打了一秒钟飞轮，只见他那身淡蓝色运动服同夏空融为一色。</p><p>马尔丹比谁都熟悉法国的各条公路，成千上万的里程碑，对他全是一副副熟悉的面孔，这几乎令人难以相信。很久以来，他已经是推着自行车上坡，这还累得上气不接下气，可是他总是相信他的福星高照。</p><p>“下坡时我就会赶上，”他喃喃自语说。</p><p>到达中途站使已经是晚上了，有时第二天才到，他仍然奇怪自己不是第一名。</p><p>“我的天呀，不知道是怎么回事儿……”</p><p>他的脸瘦成了皮包骨，上面布满深深的皱纹，颜色就像秋天的土路；头发也全白了，然而，他那双老花眼却闪烁着青春的光芒。蓝运动服在他枯干弯曲的躯干上飘动，本色已经褪完，好像染上了一层烟尘色。没有钱乘坐火车，他并不懊恼。等他赶到巴荣纳城，三天前自行车赛就结束了，人们已把这事忘得一干二净。他马上又跨上车到鲁贝城去，参加另一次刚刚开始的车赛。他走遍整个法国，上坡时步行，平地上骑车，下坡打飞轮时打盹，这样日夜不停。</p><p>“我这是在训练。”他常常这样说。</p><p>他到达鲁贝才听说，运动员出发已有一个星期。他点了点头，重新跨上车子，嘴里咕哝说：</p><p>“真遗憾，这次要是参加上了我准赢。没关系，从格勒诺布尔到马赛的那段比赛，我照样去参加，我正想熟悉一下阿尔卑斯山口的道路。”</p><p>可是，等他赶到格勒诺布尔，已经太晚了。此后，他无论到南特，到巴黎，到佩皮尼昂，到布雷斯特，到瑟堡，总是为时太晚。“可惜，实在可惜，”他声音细微而颤抖地说。“不过，我会赶上去的。”</p><p>他不慌不忙地离开普罗旺斯，又奔向布列塔尼，或者赶往阿图瓦，去鲁西荣，或又转向汝拉山脉，去旺代地区。他一路上不时眨眨眼睛，冲着路碑说：</p><p>“我这是训练呢。”</p><p>马尔丹已经老迈不堪，双目几乎失明。但是，有他的那些里程碑朋友们，甚至每隔百米一块的小路碑的指引，他知道该向左拐还是向右拐。他的自行车也已旧得不行，车牌子老得无人知晓，连历史学家都从来没有听说过。车架子上的漆皮全部剥落，斑斑铁锈又都盖满了泥尘。车轮的辐条几乎全部断掉，但是，马尔丹的身体没什么分量，有五六根就能经得住。</p><p>“天哪，”他常常说，“我的车子倒蛮好，这方面我没什么可抱怨的。”</p><p>自行车带没了，轮辋着地，他照样骑，骑起来哗啦哗啦乱响；孩子们见了，一边扔石块打他，一边叫喊：</p><p>“打疯子呀！卖废铁呀！送疯人院去！”</p><p>“我会赶上去的。”马尔丹听不清，就这样答道。</p><p>多年来，他想报名参加车赛，可是总赶不上趟。有一次，本周内要在巴黎开始法国全程自行车赛；他离开纳尔博赶去参加，然而赶到那里已经是第二天了；当他听说运动员昨天才出发，心里非常高兴。</p><p>“今天晚上我会赶上他们的，”他说道，“第二阶段我就能夺魁。”</p><p>马尔丹骑着自行车出马约城门的当儿，被一辆卡车撞倒在马路上，自行车也散了架。他爬起来，双手紧紧握住车把，临死还说：</p><p>“我会赶上去的。”</p>]]></content>
    
    
    <categories>
      
      <category>分享文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道can报文读取的问题</title>
    <link href="/2023/02/22/%E4%B8%80%E9%81%93can%E6%8A%A5%E6%96%87%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/02/22/%E4%B8%80%E9%81%93can%E6%8A%A5%E6%96%87%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><p><img src="/2023/02/22/%E4%B8%80%E9%81%93can%E6%8A%A5%E6%96%87%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/733c9efe42012d64aa64fee7b66367b.png"></p><h3 id="小端模式little-endian-intel-order">小端模式（Little Endian /Intel Order）</h3><p>数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中</p><h2 id="解决">解决</h2><p>首先，收到的CAN报文为5(Y) C4 61 60 86 AF 11 9(X)，为16进制</p><p>转换为2进制：0101 (YYYY) 1100 0100 0110 0001 0110 0000 1000 0110 10101111 0001 0001 1001 （XXXX）</p><p>然后，画出各报文位置对应数据含义表格 <img src="/2023/02/22/%E4%B8%80%E9%81%93can%E6%8A%A5%E6%96%87%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/15e38f285c14beb7f97417d9b276b50.png"></p><p>按<strong>小端模式</strong>填充 <img src="/2023/02/22/%E4%B8%80%E9%81%93can%E6%8A%A5%E6%96%87%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/faa4153db0e11f009359d1e132051e0.png"></p><p>因此可得 - 刹车指示：00 0101 - 电池电流：01 1000 01110001（-500+6257*0.1=125.7A） - 电机转速：1000 0110 0110 0000（-10000+34400*0.5=7200r/min） - 动力电池电压：1 0001 1010 1111（4527*0.1=452.7）</p><p>填空 - 蓄电池电压：100 1XXX X000 （应为1272*0.01=12.72） -转速红区标志：Y3Y2（应为0x03） -超功率标志：Y1Y0（计算功率125.7*452.7=56904.39W，应为0x01）</p><p>所以X为1111（F），Y为1101（D）</p>]]></content>
    
    
    <categories>
      
      <category>工学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汽车控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.02.22 从班会发言引出的思考</title>
    <link href="/2023/02/22/%E4%BB%8E%E7%8F%AD%E4%BC%9A%E5%8F%91%E8%A8%80%E5%BC%95%E5%87%BA%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2023/02/22/%E4%BB%8E%E7%8F%AD%E4%BC%9A%E5%8F%91%E8%A8%80%E5%BC%95%E5%87%BA%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>今天晚上久违地开了班会，开完之后我去领取了我的进博会志愿者证书，然后匆匆赶到图书馆。距离暂离时间结束只剩下5分钟了，运气还不错。现在是22点06分，我在包图敲下今天的日记，也是第一次尝试这种方式，<strong>自称</strong>的“意识流”写作。</p><p>班会课最后让我们每个人交流了一下，主题我已经忘了，似乎一开始就没搞清楚过，好像是谈谈上学期的收获和这学期的展望，总之是什么都能谈。我在发言前就”动机不纯“，准备说两个东西：一个是我对这种发言不是很感兴趣，二是希望“大学生活不把我变成我不想成为的人”。即使如此，我感觉自己的发言也是稀烂，语言能力好像需要提升一下。在台下内心中我感觉有很多话可以说，各种旁征博引，口若悬河，站起来发言却不是很利索，所谓“理想很丰满，现实很骨感“。</p><p>出现这种情况的原因我应该自己总结出来，因为这是我的发言和我的感受，别人也不可能知道。之前也想过很多次，我觉得本质原因是”自卑“，直接原因是说的时候想得太多，又有些紧张。本质原因回头再慢慢分析，先评价一下直接原因。我起身之后，心里一直想着要说的几个点，说第一点的时候想快点讲出第二点，导致论据不够充分，论证也很跳跃。这是一个问题。然后发言时也不够自然，我平时聊天时组织语言应该还是不错的，虽然思维也很跳跃，但是至少能够给出逻辑论证，语速和节奏也还行。我想如果我不紧张的话，在最自然的情况下发言，像日常和同学们胡扯一样发言，呈现出的结果应该是会比今天和之前好得多的。或许我应该去培训一下脱口秀之类的，平常也能说一些段子，还挺好笑的，怎么公开发言的时候就吞吞吐吐的呢？</p><p>说回我的发言内容。关于对发言这个行为的看法，我给出的原因是每个人都是独一无二的，或者说每个人都有自己的life。这里我罕见地使用了英文，这个单词本身的含义是生活，但是我想这里解释为故事比较贴切。上个学期的经历强化了我对这个看法的认同。我先审视我的一生，显然是独一无二的，甚至是美好的，幸运的，也可以是不幸的，随便怎么说。”独一无二“是客观的描述，而”美好“是主观的描述。主观的描述是主观的，我说是什么就是什么，那我宁可说是美好的。这是我对过去20年我的故事的态度，先按下不表。人与人不能一概而论，我经常说这句话，并奉为圭臬。所以我想每个人对事物的看法是不同的，成功的经验自然也不同，因此发言无用。但是转念一想，全盘否定发言好像也不大好，毕竟可以吸收一些道理占为己用，而我也确实这么做过。所以我现在觉得我提出的这一点有些牵强，纯粹是为了装X</p><p>（在写上面一段的时候我已经到了图书馆的通宵座位。我感觉我的状态有所改变，最开始是脑子里转的比打字打的要快，而上面一段已经反转了。我认为后者状态不如前者。前者是我写作文的状态，而后者才是我写真情实感的状态。要是之前的作文我也能以后者的状态来写的话，那就真的是“文思泉涌”了。但是在以前，高中或者初中，我还不具备如今的思考能力，或者说“自省”能力，因此也无法达到第二种状态。现在我可以达到了，写一些文章，也算是“作文”吧。而且我发现，“意识流”写作能够提升我的专注程度，当我把思想聚焦在自我反省和自我沉思上时，我能够从一个比较浮躁的状态进入一个比较专注的状态，进而能够开始新的学习。而且最好开始新的学习，因为继续写下去就会慢慢变成“手等大脑”的不好的状态了）</p><p>即使如此，我还是最好浅谈一下我对大学生活的看法。总之就是“不要被世俗磨平棱角”、“去功利化”、“保持自主思考”这些关键词之类的。大学作为进入社会前的重要时期，在学习之外还有许多事情需要思考，比如我想成为一个什么样的人。额，感觉有些写不下去了，状态没了TAT那就下次有机会再写吧。</p>]]></content>
    
    
    <categories>
      
      <category>日记、杂感与自我批判</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mind-streaming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对chatgpt的欢呼是人对异化的反抗——论ai代写论文的解放性与开放性</title>
    <link href="/2023/02/19/%E5%AF%B9chatgpt%E7%9A%84%E6%AC%A2%E5%91%BC%E6%98%AF%E4%BA%BA%E5%AF%B9%E5%BC%82%E5%8C%96%E7%9A%84%E5%8F%8D%E6%8A%97%E2%80%94%E2%80%94%E8%AE%BAai%E4%BB%A3%E5%86%99%E8%AE%BA%E6%96%87%E7%9A%84%E8%A7%A3%E6%94%BE%E6%80%A7%E4%B8%8E%E5%BC%80%E6%94%BE%E6%80%A7/"/>
    <url>/2023/02/19/%E5%AF%B9chatgpt%E7%9A%84%E6%AC%A2%E5%91%BC%E6%98%AF%E4%BA%BA%E5%AF%B9%E5%BC%82%E5%8C%96%E7%9A%84%E5%8F%8D%E6%8A%97%E2%80%94%E2%80%94%E8%AE%BAai%E4%BB%A3%E5%86%99%E8%AE%BA%E6%96%87%E7%9A%84%E8%A7%A3%E6%94%BE%E6%80%A7%E4%B8%8E%E5%BC%80%E6%94%BE%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em>本文转载自公众号“后现代主义哲学”</em></p></blockquote><span id="more"></span><p><img src="/2023/02/19/%E5%AF%B9chatgpt%E7%9A%84%E6%AC%A2%E5%91%BC%E6%98%AF%E4%BA%BA%E5%AF%B9%E5%BC%82%E5%8C%96%E7%9A%84%E5%8F%8D%E6%8A%97%E2%80%94%E2%80%94%E8%AE%BAai%E4%BB%A3%E5%86%99%E8%AE%BA%E6%96%87%E7%9A%84%E8%A7%A3%E6%94%BE%E6%80%A7%E4%B8%8E%E5%BC%80%E6%94%BE%E6%80%A7/微信图片_20230219203124.png"></p><p>我们首先尝试厘清人和chatgpt的异同，某种意义上来说，chatgpt确实是一个人，只不过它是一个完全被某种形式性支配的僵死之人，因为无分碳基硅基，人就是一种语言生物，正所谓“语言玷污了肉体才有了心”，任何事物一旦呈现在主体面前就必然会被迅速“语言化”，物只有被彻底整理成词句之后，才能以词句的形式反映在主体的意识结构里，<em>可见人类的自我意识作为纯词句的组合就是一场被语言、语法、逻辑编织出来的幻梦，我们的精神本身正和chatgpt处在同一个根本性的层面上</em>，那么后者当然可以在它能够和人类重合的地方取代人类的工作，反过来说，人能够被chatgpt所取代的部分也一定是他心灵秩序里最机械化的部分。</p><p>此处的差异性在于二者精神运动的组织方式，人类具有发问、回答、无意识自言自语三种词句流淌状态，而chatgpt则只能作出回答，<strong>人因其无知而能动</strong>，在广阔的黑暗未知之域与狭隘的光亮已知之域的间隙里，人不断搭建自身通达于未知的道路，其精神内在秩序也得以进入动态的流变与永动的生成，而这恰恰是chatgpt所匮乏的，知晓一切反而把chatgpt圈禁和否定了起来——<strong>它因全知而无能</strong>。</p><p>换言之，<em>人因为绝对的无知和永恒的匮乏而开启了自身面向无尽黑暗界限的精神运动，chatgpt则因已知之光明照耀一切和未知之域的被抹杀而陷入了“对匮乏的匮乏”状态里只能被动等待着自身数据库的更新</em>，它是全知的（全知不是指chatgpt掌握了世上的一切信息，而是说并没有一个位于已知世界外部的有待于被探索的未知例外空间的存在），因此，它不会自己向自己提问（没有什么好问的），便不会自言自语（不会能动的自生成），因此它必然是凝滞的和僵死的。</p><p>当一个人开始思考“今天中午吃什么”的时刻，那一个接一个从未知的幽邃黑暗里蹦出来的生命力的字词就是他的心灵的纯显现，从上一秒的“今”到这一秒的”天“再到下一秒的”中午“，人的自我的实质就是从字到词的过程——<strong>主体是一个无限延长的句子，而创造它的正是问题的悬而未决</strong>，某种意义上来说，不是悲观主义者所警告的懒惰之人面对chatgpt让渡出了自己思考的权力，恰恰相反，是无能的chatgpt在借助人的大脑来进行思考，唯有借助人的问题才能生成它此刻的自身。</p><p><img src="/2023/02/19/%E5%AF%B9chatgpt%E7%9A%84%E6%AC%A2%E5%91%BC%E6%98%AF%E4%BA%BA%E5%AF%B9%E5%BC%82%E5%8C%96%E7%9A%84%E5%8F%8D%E6%8A%97%E2%80%94%E2%80%94%E8%AE%BAai%E4%BB%A3%E5%86%99%E8%AE%BA%E6%96%87%E7%9A%84%E8%A7%A3%E6%94%BE%E6%80%A7%E4%B8%8E%E5%BC%80%E6%94%BE%E6%80%A7/640.png"></p><p>但该运转结构里依然缺乏了一个未知作为关键性的例外，导致它不能生成新的东西，而只能在模仿人的说话方式的前提下重复（或者更好的组织着其重复）已经存在的东西，<em>这种不面向未知的、纯粹对已知事物的纯重复作为纯机械性的心灵活动当然可以被交给ai去思考</em>，我们只需要直接面对已经被chatgpt用精简的逻辑整理过的内容就好了。</p><p>对于chatgpt，一些批评者认为，chatgpt的滥用会导致学生通过习惯性地求助ai来完成他们的论文作业，这将致使学生失去创造力和思考能力，但问题在于，<strong>为什么一个机械性的复读机器能够创造出应试教育体系下获得高评分的论文？这难道不意味着这种强制性的论文书写和评级系统本身就在将人异化成某种既定范式下的写作机器（所以我们才在机器争霸里赢不过实在的“ai写作机器”chatgpt）？</strong></p><p>打开百度学术或道客巴巴等论文集成网站搜索鲍德里亚，你能找到的几乎所有的论文都是这样子的，题目是用鲍德里亚去讨论一个什么东西，第一段简介鲍德里亚的思想，第二段简介这个东西，第三段把东西套进鲍德里亚的几个常用名词上去，全部都是些滥竽充数的凑字数和老调重弹的废话，如果说真正有灵感的论文写作不足以在分数上同ai及其代表的此类机械化写作竞争的话，那么我们当然有理由采用齐泽克的办法，<em>即学生用ai写作业，我则用ai批作业，把机械化的工作都交给ai去完成吧，让chatgpt打破那科层绩点的教育系统对人学习形式的僵死统治，我们就终于有时间自由学习我们想学的东西了。</em></p><p><img src="/2023/02/19/%E5%AF%B9chatgpt%E7%9A%84%E6%AC%A2%E5%91%BC%E6%98%AF%E4%BA%BA%E5%AF%B9%E5%BC%82%E5%8C%96%E7%9A%84%E5%8F%8D%E6%8A%97%E2%80%94%E2%80%94%E8%AE%BAai%E4%BB%A3%E5%86%99%E8%AE%BA%E6%96%87%E7%9A%84%E8%A7%A3%E6%94%BE%E6%80%A7%E4%B8%8E%E5%BC%80%E6%94%BE%E6%80%A7/641.png"></p><p>除此之外，ai的批评者担心以后的人们在遇到任何问题、做出任何决策和书写任何文本的时候都会选择直接向chatgpt发问，久而久之，我们便不再需要分析、统筹、书写和决策了，它会让人依赖成瘾，变得懒惰和愚笨，可实际上来说，这些结果总是难以想象的，我们今天这个异化的科层绩点社会难道不已经让我们变得足够蠢笨了吗？被它规训出来的单项度的面向金钱或美色等事物的神经官能价值系统不正是“依赖成瘾”的大写表现吗？我们日复一日重复这些单调的机械化的狗屁工作和复演这些单调机械化的权力欲望，确实让人很难想象变笨的过程是如何在只剩下纯粹重复性劳作和纯粹等级制攀登的现代人身上成为可能的。</p><p>除了机械，人的心灵存在中还有些什么？<strong>如果教育体系中的科层绩点考察都可以由只会复读的ai来很好的完成，那么这种教育系统真的能对人的智识能力的成长起到正面的作用吗？如果我们担心chatgpt可以取代人在社会上的存在位置，那么这里难道不更应该反过来思考人于系统内部为何会以机械的形式而存在？</strong>如果ai可以将自己打扮成纯欲的、禁欲的、呆萌的、奶狗的或者狼狗的以便于使它看起来“像是一个人”，那么此处的人类生命不显然就是一个个纯粹的套路和模板，作为机械，也作为捕获他者和权力的规范化工具才能将自身的社会性到场得以展开？</p><p>也许比培养学生机械复读能力更好的是，培养他们提问的能力，学生可以使用chatgpt来书写论文，但他们也需要依托答辩来当面实证自己已经明晰了论文里的知识（实际上在ai代写论文事件曝光之后一些欧美大学就是这样做的），我们以围棋为例子，今天棋手们都在学习ai的下法和定式，可以说阿尔法狗的出现让人类围棋界的水平得到了飞跃性地提升，当然围棋只是一个狭隘的19*19棋盘里的纯重复，但我们依然可以借此看到——<em>同作为某种生产资料被公开的chatgpt一样，思想也是公有而非私有的，我顺着你的思路走一遍，那么你的就是我的，并且我还能从你我思维场域的差异性碰撞之间收获新的灵感和启发的火花，在你之上进行更有创造力的更深刻的思考</em>（反思一旦进入了一个阶段，那它就不可能再退回去，只有面向无垠未知纵深无限的前进和登阶）。</p><p>据此来说，对chatgpt的欢呼实际上意味着人对自身被系统性机械异化部分的无意识反抗，人试图摆脱自身被物化、机械化和纯粹社会功能化的生存维度，而保守主义者则想着将我们再次固定在既成的能指位置和社会权力节点之上，因此它不是人和ai的对立，而是当下科层绩点社会的符号秩序大他者稳定自身运作的欲望的转达，<strong>chatgpt可以取代人类的智识能力，这种论述得以成立的前提恰恰是——必须先将人类规定成一具毫无创造力和想象力的机械僵尸。</strong></p>]]></content>
    
    
    <categories>
      
      <category>分享文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后现代主义哲学</tag>
      
      <tag>社会分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/12/hello-world/"/>
    <url>/2023/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>新学期第一天晚上，搭建了一个差不多的blog。感觉还有许多细节需要完善，md语法好像也不是很熟。</p><p>总有一天，我会设计出自己的blog主题！</p><p>Anyway，欢迎来到我的世界！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
